==================================================
 Directory Snapshot
==================================================
Source Path:   /Users/manpreet/Documents/kreatif/laravel/tech_proj/tag-der-bibliothek/.docker/v2
Generated on:  Mon Sep  8 19:52:29 CEST 2025
Ignored Dirs:  docs
Ignored Files: Makefile|docky.bkup
--------------------------------------------------

### DIRECTORY TREE ###

./
├── .tools/
│   └── .docky/
│       ├── commands/
│       │   ├── add_service.sh
│       │   ├── config.sh
│       │   ├── dc.sh
│       │   ├── doctor.sh
│       │   ├── generate.sh
│       │   ├── list_services.sh
│       │   ├── open_docs.sh
│       │   └── snippet.sh
│       ├── docky.sh*
│       ├── lib/
│       │   ├── answers.sh
│       │   ├── common.sh
│       │   ├── log.sh
│       │   ├── patches.sh
│       │   ├── placeholders.sh
│       │   ├── stubs.sh
│       │   ├── utils.sh
│       │   └── version.sh
│       └── readme.md
├── LICENSE
├── common/
│   ├── build/
│   │   └── scripts/
│   │       ├── mani-docker-install-js-runtime.sh
│   │       ├── mani-docker-install-system-deps.sh
│   │       ├── mani-php-ext-core.sh
│   │       ├── mani-php-ext-db.sh
│   │       └── mani-php-ext-images.sh
│   └── runtime/
│       ├── configs/
│       │   ├── apache/
│       │   │   ├── apache2.conf
│       │   │   └── sites-available/
│       │   │       └── 000-default.conf
│       │   ├── frankenphp/
│       │   │   └── Caddyfile
│       │   ├── nginx/
│       │   │   ├── conf.d/
│       │   │   │   └── default.conf
│       │   │   └── nginx.conf
│       │   └── php/
│       │       ├── 90-docker-custom.ini
│       │       └── 92-docker-php-ext-xdebug.ini
│       ├── healthchecks/
│       │   ├── healthcheck-apache.sh
│       │   ├── healthcheck-frankenphp.sh
│       │   └── healthcheck-nginx.sh
│       ├── profile/
│       │   └── zz-history.sh
│       ├── s6/
│       │   ├── cont-finish.d/
│       │   │   └── 99-shutdown-log.sh
│       │   ├── cont-init.d/
│       │   │   ├── 10-init.sh
│       │   │   └── 20-overlay.sh
│       │   ├── env/
│       │   │   └── APP_ENV
│       │   └── variants/
│       │       ├── apache/
│       │       │   └── services.d/
│       │       │       └── apache/
│       │       │           ├── finish
│       │       │           ├── log/
│       │       │           │   └── run
│       │       │           ├── run*
│       │       │           └── type
│       │       ├── frankenphp/
│       │       │   └── services.d/
│       │       │       └── frankenphp/
│       │       │           ├── log/
│       │       │           │   └── run
│       │       │           ├── run
│       │       │           └── type
│       │       └── nginx/
│       │           └── services.d/
│       │               ├── nginx/
│       │               │   ├── finish
│       │               │   ├── log/
│       │               │   │   └── run
│       │               │   ├── run
│       │               │   └── type
│       │               └── php-fpm/
│       │                   ├── finish
│       │                   ├── log/
│       │                   │   └── run
│       │                   ├── run
│       │                   └── type
│       └── sanity/
│           └── mani-sanity.sh
├── database/
│   ├── mariadb/
│   │   └── create-testing-database.sh*
│   ├── mysql/
│   │   ├── create-database.sh*
│   │   └── create-testing-database.sh*
│   └── pgsql/
│       └── create-testing-database.sql*
├── docker-compose.test.yml
├── docky*
├── docky.yml
├── examples/
│   ├── .docker-snippets/
│   │   ├── overlays/
│   │   │   └── helloworld-svc/
│   │   │       └── services.d/
│   │   │           └── hello-wolrd/
│   │   │               ├── finish
│   │   │               ├── run
│   │   │               └── type
│   │   ├── php/
│   │   │   └── custom.ini
│   │   ├── readme.md
│   │   └── scripts/
│   │       └── hw.sh
│   └── docker-compose-files/
│       ├── docker-compose.healthcheck.yml
│       ├── docker-compose.js.yml
│       └── docker-compose.simple.yml
├── grabber.sh*
├── overlays/
│   ├── locales/
│   │   └── cont-init.d/
│   │       └── 10-locales.sh
│   └── queue-worker/
│       └── services.d/
│           └── queue-worker/
│               ├── log/
│               │   └── run
│               ├── run
│               └── type
├── php/
│   ├── 8.1/
│   │   ├── apache/
│   │   │   └── Dockerfile
│   │   ├── frankenphp/
│   │   │   └── Dockerfile
│   │   └── nginx/
│   │       └── Dockerfile
│   ├── 8.2/
│   │   ├── apache/
│   │   │   └── Dockerfile
│   │   ├── frankenphp/
│   │   │   └── Dockerfile
│   │   └── nginx/
│   │       └── Dockerfile
│   ├── 8.3/
│   │   ├── apache/
│   │   │   └── Dockerfile
│   │   ├── frankenphp/
│   │   │   └── Dockerfile
│   │   └── nginx/
│   │       └── Dockerfile
│   └── 8.4/
│       ├── apache/
│       │   └── Dockerfile
│       ├── frankenphp/
│       │   └── Dockerfile
│       └── nginx/
│           └── Dockerfile
├── public/
│   ├── 34.php
│   ├── index.php
│   └── text.txt
├── readme.dev.md
├── readme.md
├── scripts/
│   ├── ci-matrix.sh
│   ├── lint-dockerfiles.sh
│   ├── lint-shell.sh
│   ├── smoke.sh
│   └── validate-s6.sh
├── stubs/
│   └── services/
│       ├── app.yml
│       ├── mysql.yml
│       └── typesense.yml
└── tests/
    ├── fixtures/
    │   ├── overlays/
    │   │   └── hello-svc/
    │   │       └── services.d/
    │   │           └── hello/
    │   │               ├── log/
    │   │               │   └── run
    │   │               ├── run
    │   │               └── type
    │   └── php/
    │       └── 99-test.ini
    ├── goss-nginx.yaml
    ├── readme.txt
    ├── scripts/
    │   ├── test-matrix.sh
    │   └── test-runtime.sh
    └── test-docky.sh

88 directories, 110 files

---

### FILE: stubs/services/mysql.yml ###

services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD:-secret}"
      MYSQL_DATABASE: "${DB_DATABASE:-app}"
      MYSQL_USER: "${DB_USERNAME:-user}"
      MYSQL_PASSWORD: "${DB_PASSWORD:-password}"
    ports:
      - "${FORWARD_DB_PORT:-3306}:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - "$DOCKY_REPLACE_NETWORK_NAME"

networks:
    $DOCKY_REPLACE_NETWORK_NAME:
        name: ${DOCKY_REPLACE_NETWORK_NAME:-docky_default}
        driver: bridge

volumes:
  db_data:
    driver: local
---

### FILE: stubs/services/app.yml ###

services:
  app:
    container_name: ${APP_SERVICE_NAME:-docky_app}
    build:
      context: ${DOCKER_SUBMODULE_DIR:-.docker/v2}
      dockerfile: php/$DOCKY_REPLACE_PHP_VERSION/$DOCKY_REPLACE_PHP_SERVER/Dockerfile
      target: $DOCKY_REPLACE_PHP_TARGET
      args:
        WWWUSER: "${WWWUSER:-1000}"
        WWWGROUP: "${WWWGROUP:-1000}"
        JS_RUNTIME_REQUIRE_NODE: "true"
        JS_RUNTIME_NODE_VERSION: "22"
        # look for docs for more options to add or disable default extensions and packages
        # you can run bash .docker/v2/docky open-docs to see the documentation of v2.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${APP_PORT:-8081}:80"
      - "${VITE_PORT:-5170}:${VITE_PORT:-5170}"
    environment:
      PUID: ${WWWUSER:-1000}
      PGID: ${WWWGROUP:-1000}
      PHP_IDE_CONFIG: "serverName=docker" # Must match the server name in PHPStorm's server configuration
      XDEBUG_MODE: "${XDEBUG_MODE:-off}"
      XDEBUG_CLIENT_HOST: "${XDEBUG_CLIENT_HOST:-host.docker.internal}"
      IGNITION_LOCAL_SITES_PATH: "${PWD}"
      SUPERVISOR_PHP_USER: "www-data"
      # EXTRA_APT_PACKAGES: '${EXTRA_APT_PACKAGES:-git jq}'
      # look for docs for more options to setup env vars
    volumes:
      # - custom scripts
      # - ./.scripts/overlays:/opt/overlay:ro
      - ".:/var/www/html"
      - "${DOCKER_SUBMODULE_DIR:-.docker/v2}/common/runtime/configs/php/90-docker-custom.ini:/usr/local/etc/php/conf.d/99-custom.ini"
      - "${DOCKER_SUBMODULE_DIR:-.docker/v2}/common/runtime/configs/php/92-docker-php-ext-xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"
      - "./logs/:/var/log"
    # healthcheck:
      # test: ["CMD", "/usr/local/bin/healthcheck-apache.sh"]
      # interval: 30s
      # timeout: 3s
      # retries: 5
    # use depends_on to ensure db is started before app, but does not wait for db to be "ready", only start the docker container
    # depends_on:
    #  - db
    networks:
      - "$DOCKY_REPLACE_NETWORK_NAME"

networks:
  $DOCKY_REPLACE_NETWORK_NAME:
    name: ${DOCKY_REPLACE_NETWORK_NAME:-docky_default}
    driver: bridge

volumes: {}

---

### FILE: stubs/services/typesense.yml ###

services:
  typesense:
    image: typesense/typesense:0.25.1
    restart: unless-stopped
    environment:
      TYPESENSE_API_KEY: "${TYPESENSE_API_KEY}"
    ports: ["${FORWARD_TYPESENSE_PORT:-8108}:8108"]
    command: ["sh","-lc","exec /opt/typesense-server --data-dir=/data --api-key=\"$TYPESENSE_API_KEY\" --listen-port=8108"]
    volumes:
      - typesense_data:/data
    networks:
      - "$DOCKY_REPLACE_NETWORK_NAME"

networks:
    $DOCKY_REPLACE_NETWORK_NAME:
      name: ${DOCKY_REPLACE_NETWORK_NAME:-docky_default}
      driver: bridge

volumes:
  typesense_data: {}

---

### FILE: docky.yml ###

version: 2

project:
  name: dockyapp
  network: optimesh              # becomes ${NETWORK_NAME}

php:
  version: "8.4"                 # ${PHP_VERSION}
  server: nginx                  # ${PHP_SERVER} : apache|nginx|frankenphp
  target: development            # ${PHP_TARGET} : development|production

# base app knobs the stub will use
app:
  ports: ["8081:80"]
  env:
    PUID: 1000
    PGID: 1000
    XDEBUG_MODE: "off"
    XDEBUG_CLIENT_HOST: "host.docker.internal"
  volumes:
    - .:/var/www/html

# choose stubs to include (order matters; app first is fine)
stubs:
  - app
  - mysql
  - typesense

# overlays available as "batteries/provided" to activate at runtime (mounted via OVERLAY_DIRS) optionally
overlays:
  - queue-worker
  - locales

# defaults for placeholders used by stubs
vars:
  NETWORK_NAME: "optimesh"
  PHP_VERSION: "8.4"
  PHP_SERVER: "nginx"
  PHP_TARGET: "development"
  DOCKER_SUBMODULE_DIR: ".docker/v2"

  # app stub
  APP_SERVICE_NAME: "docky_app"
  APP_PORT: "8081"
  VITE_PORT: "5170"

  # mysql stub
  DB_DATABASE: "app"
  DB_USERNAME: "user"
  DB_PASSWORD: "password"
  DB_ROOT_PASSWORD: "secret"
  FORWARD_DB_PORT: "3306"

  # typesense stub
  TYPESENSE_API_KEY: "changeme"
  FORWARD_TYPESENSE_PORT: "8108"
  DOCKER_PROJECT_OVERLAYS_DIR: ".docker/overlays"

OPTIONS:
  PHP_VERSIONS:
    - "8.4"
    - "8.3"
    - "8.2"
    - "8.1"
  PHP_SERVERS:
    - apache
    - nginx
    - frankenphp
  PHP_TARGETS:
    - development
    - production
  DB_ENGINES:
    - mysql
    - postgres
    - mariadb
  CACHES:
    - redis
    - memcached
  SEARCH_ENGINES:
    - elasticsearch
    - typesense
  MESSAGE_QUEUES:
    - rabbitmq
    - beanstalkd
    - redis
  OVERLAYS:
    - queue-worker
    - locales
    - adminer
    - mailhog
    - selenium
    - minio
    - mailpit
    - phpmyadmin
    - pgadmin
    - watchtower
    - custom-scripts
    - x11vnc
    - code-server

    
---

### FILE: database/mariadb/create-testing-database.sh ###

#!/usr/bin/env bash

/usr/bin/mariadb --user=root --password="$MYSQL_ROOT_PASSWORD" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS testing;
    GRANT ALL PRIVILEGES ON \`testing%\`.* TO '$MYSQL_USER'@'%';
EOSQL

---

### FILE: database/mysql/create-testing-database.sh ###

#!/usr/bin/env bash

mysql --user=root --password="$MYSQL_ROOT_PASSWORD" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS testing;
    GRANT ALL PRIVILEGES ON \`testing%\`.* TO '$MYSQL_USER'@'%';
EOSQL

---

### FILE: database/mysql/create-database.sh ###

#!/bin/bash
set -e

mysql -u root -p"${MYSQL_ROOT_PASSWORD}" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};
    CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
    GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'%';
    FLUSH PRIVILEGES;
EOSQL

---

### FILE: database/pgsql/create-testing-database.sql ###

SELECT 'CREATE DATABASE testing'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'testing')\gexec

---

### FILE: LICENSE ###

MIT License

Copyright (c) 2025 techgonia-devjio

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

### FILE: overlays/locales/cont-init.d/10-locales.sh ###

#!/command/with-contenv /bin/bash
set -euo pipefail

# Configure via env:
#   LOCALES="de_DE.UTF-8 en_GB.UTF-8 es_ES.UTF-8 it_IT.UTF-8 nl_NL.UTF-8 pt_BR.UTF-8 sv_SE.UTF-8"
#   DEFAULT_LOCALE="en_GB.UTF-8"
LOCALES_STR="${LOCALES:-en_US.UTF-8}"
DEFAULT_LOCALE="${DEFAULT_LOCALE:-en_US.UTF-8}"

echo "[locales] enabling: $LOCALES_STR (default: $DEFAULT_LOCALE)"

# Ensure lines exist in /etc/locale.gen (idempotent)
for loc in $LOCALES_STR; do
  pat="$(printf '%s UTF-8' "$loc")"
  if ! grep -qE "^${loc}[[:space:]]+UTF-8$" /etc/locale.gen 2>/dev/null; then
    echo "$pat" >> /etc/locale.gen
  fi
done

# Generate locales
locale-gen

# Persist default
if command -v update-locale >/dev/null 2>&1; then
  update-locale LANG="$DEFAULT_LOCALE" LC_ALL="$DEFAULT_LOCALE"
fi

# Also export for the running process tree
export LANG="$DEFAULT_LOCALE"
export LC_ALL="$DEFAULT_LOCALE"

---

### FILE: overlays/queue-worker/services.d/queue-worker/type ###

longrun
---

### FILE: overlays/queue-worker/services.d/queue-worker/log/run ###

#!/bin/bash
exec /command/s6-log n10 s100000 T /var/log/queue-worker

---

### FILE: overlays/queue-worker/services.d/queue-worker/run ###

#!/command/with-contenv /bin/bash
set -euo pipefail

if [[ ! -f /var/www/html/artisan ]]; then
  echo "[queue-worker] artisan not found; sleeping"
  exec tail -f /dev/null
fi

# Allow override via env
: "${QUEUE_CMD:=queue:work}"
: "${QUEUE_ARGS:=--verbose --tries=3 --timeout=90}"

echo "----> Starting Laravel queue worker: php artisan $QUEUE_CMD $QUEUE_ARGS"
exec /command/s6-setuidgid www-data \
  php /var/www/html/artisan $QUEUE_CMD $QUEUE_ARGS

---

### FILE: docky ###

#!/usr/bin/env bash
set -euo pipefail
exec "$(cd "$(dirname "${BASH_SOURCE[0]}")/.tools/.docky" && pwd)/docky.sh" "$@"
---

### FILE: tests/goss-nginx.yaml ###

command:
  php -m:
    exit-status: 0
    stdout:
      - /^intl$/
      - /^zip$/
      - /^gd$/
      - /^imagick$/
      - /^vips$/
      - /^xdebug$/
  node -v:
    exit-status: 0

file:
  /usr/local/etc/php/conf.d/99-test.ini:
    exists: true
    mode: "0644"

process:
  nginx:
    running: true

http:
  http://127.0.0.1:80/:
    status: 200

---

### FILE: tests/scripts/test-matrix.sh ###

#!/usr/bin/env bash
set -euo pipefail

# Accept pairs via CLI or default set.
# Each pair is: "<DockerfileRelPath> <server>"
if [ "$#" -ge 2 ]; then
  PAIRS=("$@")
else
  PAIRS=(
    "php/8.4/nginx/Dockerfile" "nginx"
    "php/8.4/apache/Dockerfile" "apache"
    "php/8.4/frankenphp/Dockerfile" "frankenphp"
  )
fi

PORT_BASE=${PORT_BASE:-9100}
TARGET=${TARGET:-development}

i=0
while [ $i -lt ${#PAIRS[@]} ]; do
  DF="${PAIRS[$i]}"; SERVER="${PAIRS[$((i+1))]}"
  PORT=$((PORT_BASE + (i/2)))
  echo "---- $DF ($SERVER) : $PORT ----"
  bash "$(dirname "$0")/test-runtime.sh" "$DF" "$TARGET" "$PORT" "$SERVER"
  i=$((i+2))
done

---

### FILE: tests/scripts/test-runtime.sh ###

#!/usr/bin/env bash
set -euo pipefail

# Usage:
#   bash tests/scripts/test-runtime.sh php/8.4/nginx/Dockerfile development 8091 nginx
# Defaults:
DF_REL="${1:-php/8.4/nginx/Dockerfile}"
TARGET="${2:-development}"
PORT="${3:-8090}"
SERVER="${4:-nginx}"

say(){ echo "[$(date +%H:%M:%S)] $*"; }
fail(){ echo "❌ $*" >&2; exit 1; }
want(){ local what="$1" cmd="$2"; say "assert: $what"; bash -lc "$cmd" >/dev/null || fail "$what"; }

# --- Resolve paths ------------------------------------------------------
# tests/scripts -> tests
TESTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
# tests -> v2
V2_DIR="$(cd "$TESTS_DIR/.." && pwd)"
# v2 -> repo root
REPO_ROOT="$(cd "$V2_DIR/.." && pwd)"

# Preferred runtime mount is the v2 dir (it contains public/, php/, common/, etc.)
APP_MOUNT="$V2_DIR"
FIXTURES_DIR="$TESTS_DIR/fixtures"

# Build context rule:
# - If running in a consumer project with submodule at ./.docker/v2 -> use that.
# - Else (inside this repo) use the package's v2 dir.
if [ -d "$REPO_ROOT/.docker/v2" ]; then
  BUILD_CTX="$REPO_ROOT/.docker/v2"
else
  BUILD_CTX="$V2_DIR"
fi

DF="$BUILD_CTX/$DF_REL"
[ -f "$DF" ] || fail "Dockerfile not found: $DF"

# Tag: mani-test-<server>-<phpVer>-<target>-<pid>
PHP_VER="$(basename "$(dirname "$(dirname "$DF")")")"   # e.g. 8.4
TAG="mani-test-${SERVER}-${PHP_VER}-${TARGET}-$$"

say "==> Build $TAG from $DF (target=$TARGET, ctx=$BUILD_CTX)"
docker build -f "$DF" --target "$TARGET" -t "$TAG" "$BUILD_CTX" \
  --build-arg INSTALL_DB_MYSQL_CLIENT=true \
  --build-arg INSTALL_DB_PGSQL_CLIENT=true \
  --build-arg DB_PGSQL_CLIENT_VERSION="${DB_PGSQL_CLIENT_VERSION:-17}" \
  --build-arg PHP_EXT_PDO_MYSQL=true \
  --build-arg PHP_EXT_PDO_PGSQL=true \
  --build-arg PHP_EXT_GD=true \
  --build-arg PHP_EXT_IMAGICK=true \
  --build-arg PHP_EXT_VIPS=true \
  --build-arg PHP_EXT_INTL=true \
  --build-arg PHP_EXT_ZIP=true \
  --build-arg PHP_EXT_XDEBUG=true \
  --build-arg JS_RUNTIME_REQUIRE_NODE=true \
  --build-arg JS_RUNTIME_NODE_VERSION=22

# --- Run ---------------------------------------------------------------
cid=""
cleanup(){ [ -n "${cid:-}" ] && docker rm -f "$cid" >/dev/null 2>&1 || true; }
trap cleanup EXIT

say "==> Run on :$PORT"
cid=$(docker run -d \
  -p "$PORT:80" \
  -e PUID=1000 -e PGID=1000 \
  -e XDEBUG_MODE=off \
  -e XDEBUG_CLIENT_HOST=host.docker.internal \
  -e OVERLAY_DIRS=/opt/overlay \
  -v "$APP_MOUNT:/var/www/html" \
  -v "$FIXTURES_DIR/php/99-test.ini:/usr/local/etc/php/conf.d/99-test.ini:ro" \
  -v "$FIXTURES_DIR/overlays/hello-svc:/opt/overlay/hello-svc:ro" \
  --name "$TAG" "$TAG")

# --- Probes -------------------------------------------------------------
say "==> Wait for HTTP"
for i in {1..60}; do
  if curl -fsS "http://127.0.0.1:$PORT/" >/dev/null; then break; fi
  sleep 1
  [ $i -eq 60 ] && fail "HTTP not up"
done

say "==> HTTP 200 on /"
curl -fsS -o /dev/null -w "%{http_code}\n" "http://127.0.0.1:$PORT/" | grep -q '^200$' || fail "GET / not 200"

say "==> Server process check"
case "$SERVER" in
  nginx)      docker exec "$cid" pgrep -fa nginx >/dev/null || fail "nginx not running" ;;
  apache)     docker exec "$cid" pgrep -fa apache2 >/dev/null || fail "apache not running" ;;
  frankenphp) docker exec "$cid" pgrep -fa frankenphp >/dev/null || fail "frankenphp not running" ;;
  *)          say "unknown server: $SERVER (skipping process check)";;
esac

say "==> PHP extensions"
want "php present" "docker exec $cid php -v"
want "opcache compiled" "docker exec $cid php -i | grep -qi opcache.enable"
want "intl loaded" "docker exec $cid php -m | grep -qi '^intl$'"
want "zip loaded" "docker exec $cid php -m | grep -qi '^zip$'"
want "pdo_mysql loaded" "docker exec $cid php -m | grep -qi 'pdo_mysql'"
want "pdo_pgsql loaded" "docker exec $cid php -m | grep -qi 'pdo_pgsql'"
want "gd loaded" "docker exec $cid php -m | grep -qi '^gd$'"
want "imagick loaded" "docker exec $cid php -m | grep -qi '^imagick$'"
want "vips loaded" "docker exec $cid php -m | grep -qi '^vips$'"

say "==> Xdebug present but off"
want "xdebug extension present" "docker exec $cid php -m | grep -qi '^xdebug$'"
docker exec "$cid" php -r 'echo function_exists("xdebug_info") ? (getenv("XDEBUG_MODE") ?: ini_get("xdebug.mode") ?: "(none)") : "(none)";' \
   | grep -Eiq '(^off$)|^\(none\)$' || fail "xdebug not effectively off"
say "==> memory_limit overridden (via mounted ini)"
docker exec "$cid" sh -lc 'php -i | grep -Eq "^memory_limit => 384M => 384M$"' || fail "memory_limit not 384M"

---

### FILE: tests/fixtures/overlays/hello-svc/services.d/hello/type ###

longrun
---

### FILE: tests/fixtures/overlays/hello-svc/services.d/hello/log/run ###

#!/bin/sh
mkdir -p /var/log/hello
exec /command/s6-log n10 s100000 T /var/log/hello

---

### FILE: tests/fixtures/overlays/hello-svc/services.d/hello/run ###

#!/command/with-contenv /bin/bash
set -euo pipefail
echo "[hello] service up"
# prove we’re alive by touching a file repeatedly
while true; do
  date -u > /tmp/hello.probe
  sleep 5
done

---

### FILE: tests/fixtures/php/99-test.ini ###

; prove we can override ini at runtime
memory_limit = 384M

---

### FILE: tests/readme.txt ###

here’s a tiny, no-frills README you can drop at `v2/tests/README.md` (plain text is fine too).

---

# php-contenv v2 — tests

## What these tests do

* **Build** your PHP images (default: PHP 8.4 for `nginx`, `apache`, `frankenphp`) with common build args enabled.
* **Run** each image and probe it:

  * HTTP responds `200 /`
  * Server process is running (nginx/apache/frankenphp)
  * Expected PHP extensions are loaded (intl, zip, gd, imagick, vips, pdo\_mysql, pdo\_pgsql)
  * Xdebug is **present** but effectively **off**
  * A mounted `99-test.ini` overrides `memory_limit` to `384M`
  * A sample **overlay service** writes `/tmp/hello.probe`
  * Node & npm available when requested
* **Docky smoke test:** generate a compose file and add a stub service in a temp project.

> Build context auto-detect:
>
> * If a consumer project has `./.docker/v2/` → use that.
> * Otherwise (inside this repo) → use the package’s `v2/` directory.
>   No symlink needed.

## Requirements

* Docker (Desktop or Engine)
* Bash, curl
* (Optional) **yq v4** — only needed for the docky smoke test
* (Optional) **dgoss/goss** — if you want to run the goss example

## How to run

From **any** directory:

```bash
make -C v2/tests
```

or inside the folder:

```bash
cd v2/tests
make
```

That runs the default **matrix** (nginx, apache, frankenphp on PHP 8.4).

### Useful targets

* Full matrix (default):

  ```bash
  make -C v2/tests matrix
  ```
* Single quick run (nginx example):

  ```bash
  make -C v2/tests runtime-nginx
  ```
* Docky smoke test (compose generation + add-svc):

  ```bash
  make -C v2/tests docky
  ```
* Goss example (if you have `dgoss`):

  ```bash
  make -C v2/tests goss
  ```
* Cleanup any leftover test containers/images:

  ```bash
  make -C v2/tests clean
  ```

## Configuration knobs

* Change base port for HTTP checks (defaults to `9300`):

  ```bash
  make -C v2/tests PORT_BASE=9500
  ```
* Select a different build target (e.g. `production` if your Dockerfiles define it):

  ```bash
  make -C v2/tests TARGET=production
  ```
* Limit which pairs to test (format: `<DockerfileRelPath> <server>`):

  ```bash
  make -C v2/tests \
    PAIRS="php/8.4/nginx/Dockerfile nginx php/8.4/apache/Dockerfile apache"
  ```

## What gets mounted during runtime tests

* App code: the package `v2/` directory → `/var/www/html`
* PHP ini override: `tests/fixtures/php/99-test.ini` → `/usr/local/etc/php/conf.d/99-test.ini:ro`
* Overlay example: `tests/fixtures/overlays/hello-svc` → `/opt/overlay/hello-svc:ro`
* `OVERLAY_DIRS=/opt/overlay` is set so the init script loads overlays.

## Troubleshooting

* **“path .docker/v2 not found”**
  You’re running inside the package repo and the script couldn’t find a consumer `.docker/v2`. The tests will fall back to `v2/` automatically (with the provided scripts). Make sure you updated the test scripts as in repo.
* **Port already in use**
  Change `PORT_BASE` or stop whatever is using the port.
* **Slow startup**
  Docker Desktop may need more CPU/RAM. Give it a few seconds; the test waits up to 60s for HTTP.
* **xdebug appears on**
  Ensure `XDEBUG_MODE=off` is respected; the test will fail if it isn’t.

That’s it—`make -C v2/tests` should give you green ✅ when everything’s wired correctly.

---

### FILE: tests/test-docky.sh ###

#!/usr/bin/env bash
set -euo pipefail

# Smoke test docky without touching your repo

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"   # -> repo root

# Detect docky location: consumer layout (.docker/v2) or package layout (v2)
if [ -x "$ROOT/.docker/v2/docky" ]; then
  DOCKY_PATH="$ROOT/.docker/v2/docky"
  COPY_STEP(){
    cp -a "$ROOT/.docker" app/.docker;
    mkdir -p app/.docker-snippets && touch app/.docker-snippets/docky.answers.yml;
  }
elif [ -x "$ROOT/v2/docky" ]; then
  # shellcheck disable=SC2034
  DOCKY_PATH="$ROOT/v2/docky"
  COPY_STEP(){
    mkdir -p app/.docker && cp -a "$ROOT/v2" app/.docker/v2;
    mkdir -p app/.docker-snippets && touch app/.docker-snippets/docky.answers.yml
  }
else
  echo "Root: $ROOT"
  echo "docky not found at $ROOT/.docker/v2/docky or $ROOT/v2/docky or make sure its executable chmod +x"
  exit 1
fi

TMP="$(mktemp -d)"; trap 'rm -rf "$TMP"' EXIT
cd "$TMP"
mkdir -p app
COPY_STEP
cd app

# regenerate compose
./.docker/v2/docky gen --no-ask

test -f docker-compose.yml || { echo "compose not generated"; exit 1; }
grep -q '^services:' docker-compose.yml || { echo "compose invalid"; exit 1; }

# add a stub service and ensure it appears in project docky.yml
echo "Adding mysql stub service"
./.docker/v2/docky add-svc mysql
grep -q 'mysql:' docker-compose.yml || { echo "mysql service not in compose"; exit 1; }
# ensure at this point only mysql and app service are present and not others
yq e '.services | keys | .[]' docker-compose.yml | grep -Ev '^(app|mysql)$' && { echo "ERROR: unexpected services in compose"; yq e '.services | keys | .[]' docker-compose.yml; exit 1; }
echo "docky tests OK"

---

### FILE: php/8.1/frankenphp/Dockerfile ###

ARG PHP_VERSION=8.1
ARG FrankenPHP_Version=1
ARG OS=bookworm
FROM dunglas/frankenphp:${FrankenPHP_Version}-php${PHP_VERSION}-${OS} AS base
# If this tag ever 404s, try: ghcr.io/dunglas/frankenphp:1-php8.4-bookworm

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients + PHP Extensions feature flags (same knobs you already use)
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Extension installers (same domain scripts you already have)
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time passes
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# PHP conf + FrankenPHP (Caddyfile) + s6 services
COPY common/runtime/configs/php/           /usr/local/etc/php/conf.d/
COPY common/runtime/configs/frankenphp/    /etc/caddy/
COPY common/runtime/s6/cont-init.d/         /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/       /etc/cont-finish.d/
COPY common/runtime/s6/variants/frankenphp/services.d/ /etc/services.d/

# Normalize EOLs and +x for s6
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \; 


ENV HOME=/root \
    XDG_CONFIG_HOME=/etc/caddy \
    XDG_DATA_HOME=/var/lib/caddy \
    XDG_STATE_HOME=/var/lib/caddy

RUN mkdir -p /var/lib/caddy /etc/caddy \
 && chown -R www-data:www-data /var/lib/caddy || true
 
# Healthcheck
COPY common/runtime/healthchecks/healthcheck-frankenphp.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-frankenphp.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-frankenphp.sh || exit 1

# Runtime libs in final image (domain scripts in --runtime mode)
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# Sanity tool + bash history timestamping
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# COPY common/build/scripts/mani-sanity.sh /usr/local/bin/mani-sanity
# RUN chmod +x /usr/local/bin/mani-sanity

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,frankenphp} \
 && chown -R www-data:www-data /var/log/{php,frankenphp} \
 && chmod -R 775 /var/log/{php,frankenphp}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.1/nginx/Dockerfile ###

ARG PHP_VERSION=8.1
FROM php:${PHP_VERSION}-fpm-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1
SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=false
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false


# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Nginx + tools
RUN apt-get update && apt-get install -y --no-install-recommends nginx \
 && rm -rf /var/lib/apt/lists/*

# Configs + s6
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/nginx/nginx.conf  /etc/nginx/nginx.conf
COPY common/runtime/configs/nginx/conf.d/     /etc/nginx/conf.d/

COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/nginx/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;

# Sanity check script + bash history
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
ARG ENABLE_HEALTHCHECK=true
ENV ENABLE_HEALTHCHECK=${ENABLE_HEALTHCHECK}
COPY common/runtime/healthchecks/healthcheck-nginx.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-nginx.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 --start-period=10s \
  CMD bash -lc '[[ "${ENABLE_HEALTHCHECK}" == "true" ]] && /usr/local/bin/healthcheck-nginx.sh || exit 0'
# HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-nginx.sh || exit 1

# ---------- Runtime libs in final image ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
EXPOSE 80
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,nginx} \
 && chown -R www-data:www-data /var/log/{php,nginx} \
 && chmod -R 775 /var/log/{php,nginx}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.1/apache/Dockerfile ###

ARG PHP_VERSION=8.1
FROM php:${PHP_VERSION}-apache-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# Apache modules
RUN a2enmod rewrite headers env dir mime proxy proxy_fcgi setenvif

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Configs + s6 (legacy paths)
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/apache/  /etc/apache2/
COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/apache/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;
# && printf '%s\n' '#!/bin/sh' 'exec /command/s6-log n10 s100000 T /var/log/apache' > /etc/services.d/apache/log/run \
# && chmod +x /etc/services.d/apache/log/run

COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
COPY common/runtime/healthchecks/healthcheck-apache.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-apache.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-apache.sh || exit 1

# ---------- Runtime libs in final image (domain scripts in --runtime mode) ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=true
ARG PHP_EXT_REDIS=true
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,apache2} \
 && chown -R www-data:www-data /var/log/{php,apache2} \
 && chmod -R 775 /var/log/{php,apache2}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.4/frankenphp/Dockerfile ###

ARG PHP_VERSION=8.4
# OS: bookworm or alpine
ARG FrankenPHP_Version=1
ARG OS=bookworm
FROM dunglas/frankenphp:${FrankenPHP_Version}-php${PHP_VERSION}-${OS} AS base
# If this tag ever 404s, try: ghcr.io/dunglas/frankenphp:1-php8.4-bookworm

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients + PHP Extensions feature flags (same knobs you already use)
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Extension installers (same domain scripts you already have)
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time passes
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# PHP conf + FrankenPHP (Caddyfile) + s6 services
COPY common/runtime/configs/php/           /usr/local/etc/php/conf.d/
COPY common/runtime/configs/frankenphp/    /etc/caddy/
COPY common/runtime/s6/cont-init.d/         /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/       /etc/cont-finish.d/
COPY common/runtime/s6/variants/frankenphp/services.d/ /etc/services.d/

# Normalize EOLs and +x for s6
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \; 


ENV HOME=/root \
    XDG_CONFIG_HOME=/etc/caddy \
    XDG_DATA_HOME=/var/lib/caddy \
    XDG_STATE_HOME=/var/lib/caddy

RUN mkdir -p /var/lib/caddy /etc/caddy \
 && chown -R www-data:www-data /var/lib/caddy || true
 
# Healthcheck
COPY common/runtime/healthchecks/healthcheck-frankenphp.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-frankenphp.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-frankenphp.sh || exit 1

# Runtime libs in final image (domain scripts in --runtime mode)
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# Sanity tool + bash history timestamping
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# COPY common/build/scripts/mani-sanity.sh /usr/local/bin/mani-sanity
# RUN chmod +x /usr/local/bin/mani-sanity

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,frankenphp} \
 && chown -R www-data:www-data /var/log/{php,frankenphp} \
 && chmod -R 775 /var/log/{php,frankenphp}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.4/nginx/Dockerfile ###

ARG PHP_VERSION=8.4
FROM php:${PHP_VERSION}-fpm-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1
SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=false
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false


# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Nginx + tools
RUN apt-get update && apt-get install -y --no-install-recommends nginx \
 && rm -rf /var/lib/apt/lists/*

# Configs + s6
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/nginx/nginx.conf  /etc/nginx/nginx.conf
COPY common/runtime/configs/nginx/conf.d/     /etc/nginx/conf.d/

COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/nginx/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;

# Sanity check script + bash history
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
ARG ENABLE_HEALTHCHECK=false
ENV ENABLE_HEALTHCHECK=${ENABLE_HEALTHCHECK}
COPY common/runtime/healthchecks/healthcheck-nginx.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-nginx.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 --start-period=10s \
  CMD bash -lc '[[ "${ENABLE_HEALTHCHECK}" == "true" ]] && /usr/local/bin/healthcheck-nginx.sh || exit 0'
# HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-nginx.sh || exit 1

# ---------- Runtime libs in final image ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
EXPOSE 80
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,nginx} \
 && chown -R www-data:www-data /var/log/{php,nginx} \
 && chmod -R 775 /var/log/{php,nginx}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.4/apache/Dockerfile ###


ARG PHP_VERSION=8.4
FROM php:${PHP_VERSION}-apache-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# Apache modules
RUN a2enmod rewrite headers env dir mime proxy proxy_fcgi setenvif

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Configs + s6 (legacy paths)
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/apache/  /etc/apache2/
COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/apache/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;
# && printf '%s\n' '#!/bin/sh' 'exec /command/s6-log n10 s100000 T /var/log/apache' > /etc/services.d/apache/log/run \
# && chmod +x /etc/services.d/apache/log/run

COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
COPY common/runtime/healthchecks/healthcheck-apache.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-apache.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-apache.sh || exit 1

# ---------- Runtime libs in final image (domain scripts in --runtime mode) ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=true
ARG PHP_EXT_REDIS=true
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,apache2,frankenphp,nginx} \
 && chown -R www-data:www-data /var/log/{php,apache2,frankenphp,nginx} \
 && chmod -R 775 /var/log/{php,apache2,frankenphp,nginx}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.3/frankenphp/Dockerfile ###

ARG PHP_VERSION=8.3
ARG FrankenPHP_Version=1
ARG OS=bookworm
FROM dunglas/frankenphp:${FrankenPHP_Version}-php${PHP_VERSION}-${OS} AS base
# If this tag ever 404s, try: ghcr.io/dunglas/frankenphp:1-php8.4-bookworm

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients + PHP Extensions feature flags (same knobs you already use)
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Extension installers (same domain scripts you already have)
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time passes
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# PHP conf + FrankenPHP (Caddyfile) + s6 services
COPY common/runtime/configs/php/           /usr/local/etc/php/conf.d/
COPY common/runtime/configs/frankenphp/    /etc/caddy/
COPY common/runtime/s6/cont-init.d/         /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/       /etc/cont-finish.d/
COPY common/runtime/s6/variants/frankenphp/services.d/ /etc/services.d/

# Normalize EOLs and +x for s6
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \; 


ENV HOME=/root \
    XDG_CONFIG_HOME=/etc/caddy \
    XDG_DATA_HOME=/var/lib/caddy \
    XDG_STATE_HOME=/var/lib/caddy

RUN mkdir -p /var/lib/caddy /etc/caddy \
 && chown -R www-data:www-data /var/lib/caddy || true
 
# Healthcheck
COPY common/runtime/healthchecks/healthcheck-frankenphp.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-frankenphp.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-frankenphp.sh || exit 1

# Runtime libs in final image (domain scripts in --runtime mode)
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# Sanity tool + bash history timestamping
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# COPY common/build/scripts/mani-sanity.sh /usr/local/bin/mani-sanity
# RUN chmod +x /usr/local/bin/mani-sanity

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,frankenphp} \
 && chown -R www-data:www-data /var/log/{php,frankenphp} \
 && chmod -R 775 /var/log/{php,frankenphp}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.3/nginx/Dockerfile ###

ARG PHP_VERSION=8.3
FROM php:${PHP_VERSION}-fpm-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1
SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=false
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false


# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Nginx + tools
RUN apt-get update && apt-get install -y --no-install-recommends nginx \
 && rm -rf /var/lib/apt/lists/*

# Configs + s6
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/nginx/nginx.conf  /etc/nginx/nginx.conf
COPY common/runtime/configs/nginx/conf.d/     /etc/nginx/conf.d/

COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/nginx/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;

# Sanity check script + bash history
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
ARG ENABLE_HEALTHCHECK=true
ENV ENABLE_HEALTHCHECK=${ENABLE_HEALTHCHECK}
COPY common/runtime/healthchecks/healthcheck-nginx.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-nginx.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 --start-period=10s \
  CMD bash -lc '[[ "${ENABLE_HEALTHCHECK}" == "true" ]] && /usr/local/bin/healthcheck-nginx.sh || exit 0'
# HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-nginx.sh || exit 1

# ---------- Runtime libs in final image ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
EXPOSE 80
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,nginx} \
 && chown -R www-data:www-data /var/log/{php,nginx} \
 && chmod -R 775 /var/log/{php,nginx}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.3/apache/Dockerfile ###

ARG PHP_VERSION=8.3
FROM php:${PHP_VERSION}-apache-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# Apache modules
RUN a2enmod rewrite headers env dir mime proxy proxy_fcgi setenvif

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Configs + s6 (legacy paths)
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/apache/  /etc/apache2/
COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/apache/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;
# && printf '%s\n' '#!/bin/sh' 'exec /command/s6-log n10 s100000 T /var/log/apache' > /etc/services.d/apache/log/run \
# && chmod +x /etc/services.d/apache/log/run

COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
COPY common/runtime/healthchecks/healthcheck-apache.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-apache.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-apache.sh || exit 1

# ---------- Runtime libs in final image (domain scripts in --runtime mode) ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=true
ARG PHP_EXT_REDIS=true
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,apache2} \
 && chown -R www-data:www-data /var/log/{php,apache2} \
 && chmod -R 775 /var/log/{php,apache2}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.2/frankenphp/Dockerfile ###

ARG PHP_VERSION=8.2
ARG FrankenPHP_Version=1
ARG OS=bookworm
FROM dunglas/frankenphp:${FrankenPHP_Version}-php${PHP_VERSION}-${OS} AS base
# If this tag ever 404s, try: ghcr.io/dunglas/frankenphp:1-php8.4-bookworm

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients + PHP Extensions feature flags (same knobs you already use)
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Extension installers (same domain scripts you already have)
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time passes
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# PHP conf + FrankenPHP (Caddyfile) + s6 services
COPY common/runtime/configs/php/           /usr/local/etc/php/conf.d/
COPY common/runtime/configs/frankenphp/    /etc/caddy/
COPY common/runtime/s6/cont-init.d/         /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/       /etc/cont-finish.d/
COPY common/runtime/s6/variants/frankenphp/services.d/ /etc/services.d/

# Normalize EOLs and +x for s6
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \; 


ENV HOME=/root \
    XDG_CONFIG_HOME=/etc/caddy \
    XDG_DATA_HOME=/var/lib/caddy \
    XDG_STATE_HOME=/var/lib/caddy

RUN mkdir -p /var/lib/caddy /etc/caddy \
 && chown -R www-data:www-data /var/lib/caddy || true
 
# Healthcheck
COPY common/runtime/healthchecks/healthcheck-frankenphp.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-frankenphp.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-frankenphp.sh || exit 1

# Runtime libs in final image (domain scripts in --runtime mode)
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=false

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# Sanity tool + bash history timestamping
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# COPY common/build/scripts/mani-sanity.sh /usr/local/bin/mani-sanity
# RUN chmod +x /usr/local/bin/mani-sanity

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,frankenphp} \
 && chown -R www-data:www-data /var/log/{php,frankenphp} \
 && chmod -R 775 /var/log/{php,frankenphp}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.2/nginx/Dockerfile ###

ARG PHP_VERSION=8.2
FROM php:${PHP_VERSION}-fpm-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1
SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=false
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false


# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

# s6
COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Nginx + tools
RUN apt-get update && apt-get install -y --no-install-recommends nginx \
 && rm -rf /var/lib/apt/lists/*

# Configs + s6
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/nginx/nginx.conf  /etc/nginx/nginx.conf
COPY common/runtime/configs/nginx/conf.d/     /etc/nginx/conf.d/

COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/nginx/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;

# Sanity check script + bash history
COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
ARG ENABLE_HEALTHCHECK=true
ENV ENABLE_HEALTHCHECK=${ENABLE_HEALTHCHECK}
COPY common/runtime/healthchecks/healthcheck-nginx.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-nginx.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 --start-period=10s \
  CMD bash -lc '[[ "${ENABLE_HEALTHCHECK}" == "true" ]] && /usr/local/bin/healthcheck-nginx.sh || exit 0'
# HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-nginx.sh || exit 1

# ---------- Runtime libs in final image ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=true
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=true
ARG PHP_EXT_GMP=true
ARG PHP_EXT_BCMATH=true
ARG PHP_EXT_EXIF=true
ARG PHP_EXT_PCNTL=true

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
EXPOSE 80
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,nginx} \
 && chown -R www-data:www-data /var/log/{php,nginx} \
 && chmod -R 775 /var/log/{php,nginx}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: php/8.2/apache/Dockerfile ###

ARG PHP_VERSION=8.2
FROM php:${PHP_VERSION}-apache-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1

SHELL ["/bin/bash","-o","pipefail","-c"]

# Core OS deps (includes dos2unix)
COPY common/build/scripts/mani-docker-install-system-deps.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-system-deps.sh \
 && mani-docker-install-system-deps.sh

# Apache modules
RUN a2enmod rewrite headers env dir mime proxy proxy_fcgi setenvif

# ---------- Build tools & optional components ----------
FROM base AS build_tools

# DB Clients
ARG INSTALL_DB_PGSQL_CLIENT=false
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=false

# PHP Extensions (feature flags)
ARG PHP_EXT_PDO_PGSQL=false
ARG PHP_EXT_PDO_MYSQL=false
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=false
ARG PHP_EXT_REDIS=false
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

# JS Runtimes
ARG JS_RUNTIME_NODE_VERSION=22
ARG JS_RUNTIME_REQUIRE_NODE=true
ARG JS_RUNTIME_REQUIRE_DENO=false
ARG JS_RUNTIME_REQUIRE_BUN=false
ARG JS_RUNTIME_REQUIRE_YARN=false
ARG JS_RUNTIME_REQUIRE_PNPM=false

# Domain scripts
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Build-time: DB stack (repos/clients, -dev, compile/pecl)
ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED}
RUN mani-php-ext-db.sh --build

# Build-time: Image drivers
ENV PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS}
RUN mani-php-ext-images.sh --build

# Build-time: Core non-DB extensions (+ Xdebug install only)
ENV PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG}
RUN mani-php-ext-core.sh --build

# JS runtimes
COPY common/build/scripts/mani-docker-install-js-runtime.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-docker-install-js-runtime.sh \
 && JS_RUNTIME_REQUIRE_NODE=${JS_RUNTIME_REQUIRE_NODE} \
    JS_RUNTIME_NODE_VERSION=${JS_RUNTIME_NODE_VERSION} \
    JS_RUNTIME_REQUIRE_DENO=${JS_RUNTIME_REQUIRE_DENO} \
    JS_RUNTIME_REQUIRE_BUN=${JS_RUNTIME_REQUIRE_BUN} \
    JS_RUNTIME_REQUIRE_YARN=${JS_RUNTIME_REQUIRE_YARN} \
    JS_RUNTIME_REQUIRE_PNPM=${JS_RUNTIME_REQUIRE_PNPM} \
    mani-docker-install-js-runtime.sh

# ---------- s6 overlay (multi-arch) ----------
FROM busybox:1.36 AS s6-installer
ARG S6_OVERLAY_VERSION="v3.1.6.2"
ARG TARGETARCH
RUN set -e; \
  case "${TARGETARCH}" in \
    amd64) ARCH=x86_64 ;; \
    arm64) ARCH=aarch64 ;; \
    arm)   ARCH=arm ;; \
    *)     ARCH=x86_64 ;; \
  esac; \
  wget -qO /tmp/s6-overlay-noarch.tar.xz https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
  wget -qO /tmp/s6-overlay-arch.tar.xz   https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${ARCH}.tar.xz

# ---------- Composer ----------
FROM composer:latest AS composer

# ---------- Final base ----------
FROM base AS final_base

COPY --from=s6-installer /tmp/s6-overlay-*.tar.xz /tmp/
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz \
 && tar -C / -Jxpf /tmp/s6-overlay-arch.tar.xz \
 && rm /tmp/s6-overlay-*.tar.xz

# Configs + s6 (legacy paths)
COPY common/runtime/configs/php/     /usr/local/etc/php/conf.d/
COPY common/runtime/configs/apache/  /etc/apache2/
COPY common/runtime/s6/cont-init.d/   /etc/cont-init.d/
COPY common/runtime/s6/cont-finish.d/ /etc/cont-finish.d/
COPY common/runtime/s6/variants/apache/services.d/ /etc/services.d/

# Normalize EOLs and ensure +x for s6 scripts
RUN find /etc/cont-init.d /etc/cont-finish.d /etc/services.d -type f -exec dos2unix {} \; \
 && chmod -R a+rx /etc/cont-init.d /etc/cont-finish.d \
 && find /etc/services.d -type f -name run -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -name finish -exec chmod a+rx {} \; \
 && find /etc/services.d -type f -path '*/log/run' -exec chmod a+rx {} \;
# && printf '%s\n' '#!/bin/sh' 'exec /command/s6-log n10 s100000 T /var/log/apache' > /etc/services.d/apache/log/run \
# && chmod +x /etc/services.d/apache/log/run

COPY common/runtime/sanity/mani-sanity.sh /usr/local/bin/mani-sanity
COPY common/runtime/profile/zz-history.sh  /etc/profile.d/zz-history.sh
RUN chmod +x /usr/local/bin/mani-sanity && chmod 644 /etc/profile.d/zz-history.sh \
 && printf '\n[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh\n' >> /etc/bash.bashrc

# Healthcheck
COPY common/runtime/healthchecks/healthcheck-apache.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck-apache.sh
HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD /usr/local/bin/healthcheck-apache.sh || exit 1

# ---------- Runtime libs in final image (domain scripts in --runtime mode) ----------
# Re-declare args and promote to ENV for this stage
ARG INSTALL_DB_PGSQL_CLIENT=true
ARG DB_PGSQL_CLIENT_VERSION=18
ARG INSTALL_DB_MYSQL_CLIENT=true

ARG PHP_EXT_PDO_PGSQL=true
ARG PHP_EXT_PDO_MYSQL=true
ARG PHP_EXT_PDO_SQLITE=false
ARG PHP_EXT_SQLITE=false
ARG PHP_EXT_MONGODB=true
ARG PHP_EXT_REDIS=true
ARG PHP_EXT_MEMCACHED=true

ARG PHP_EXT_GD=true
ARG PHP_EXT_IMAGICK=true
ARG PHP_EXT_VIPS=true

ARG PHP_EXT_XDEBUG=true
ARG PHP_EXT_INTL=true
ARG PHP_EXT_SOAP=false
ARG PHP_EXT_ZIP=true
ARG PHP_EXT_XSL=false
ARG PHP_EXT_GMP=false
ARG PHP_EXT_BCMATH=false
ARG PHP_EXT_EXIF=false
ARG PHP_EXT_PCNTL=false

ENV INSTALL_DB_PGSQL_CLIENT=${INSTALL_DB_PGSQL_CLIENT} \
    DB_PGSQL_CLIENT_VERSION=${DB_PGSQL_CLIENT_VERSION} \
    INSTALL_DB_MYSQL_CLIENT=${INSTALL_DB_MYSQL_CLIENT} \
    PHP_EXT_PDO_PGSQL=${PHP_EXT_PDO_PGSQL} \
    PHP_EXT_PDO_MYSQL=${PHP_EXT_PDO_MYSQL} \
    PHP_EXT_PDO_SQLITE=${PHP_EXT_PDO_SQLITE} \
    PHP_EXT_SQLITE=${PHP_EXT_SQLITE} \
    PHP_EXT_MONGODB=${PHP_EXT_MONGODB} \
    PHP_EXT_REDIS=${PHP_EXT_REDIS} \
    PHP_EXT_MEMCACHED=${PHP_EXT_MEMCACHED} \
    PHP_EXT_GD=${PHP_EXT_GD} \
    PHP_EXT_IMAGICK=${PHP_EXT_IMAGICK} \
    PHP_EXT_VIPS=${PHP_EXT_VIPS} \
    PHP_EXT_XDEBUG=${PHP_EXT_XDEBUG} \
    PHP_EXT_INTL=${PHP_EXT_INTL} \
    PHP_EXT_SOAP=${PHP_EXT_SOAP} \
    PHP_EXT_ZIP=${PHP_EXT_ZIP} \
    PHP_EXT_XSL=${PHP_EXT_XSL} \
    PHP_EXT_GMP=${PHP_EXT_GMP} \
    PHP_EXT_BCMATH=${PHP_EXT_BCMATH} \
    PHP_EXT_EXIF=${PHP_EXT_EXIF} \
    PHP_EXT_PCNTL=${PHP_EXT_PCNTL}

# Copy domain scripts for runtime pass
COPY common/build/scripts/mani-php-ext-core.sh   /usr/local/bin/
COPY common/build/scripts/mani-php-ext-db.sh     /usr/local/bin/
COPY common/build/scripts/mani-php-ext-images.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/mani-php-ext-*.sh

# Runtime passes (only shared libs and ini toggles)
RUN mani-php-ext-db.sh --runtime
RUN mani-php-ext-images.sh --runtime
RUN mani-php-ext-core.sh --runtime

# ---------- Production ----------
FROM final_base AS production
WORKDIR /var/www/html
USER root

COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader \
 && rm /usr/local/bin/composer

COPY . .
ENTRYPOINT ["/init"]

# ---------- Development ----------
FROM final_base AS development
USER root
COPY --from=build_tools /usr/local/ /usr/local/
COPY --from=build_tools /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

RUN mkdir -p /var/log/{php,apache2} \
 && chown -R www-data:www-data /var/log/{php,apache2} \
 && chmod -R 775 /var/log/{php,apache2}

WORKDIR /var/www/html
EXPOSE 80
ENTRYPOINT ["/init"]

---

### FILE: grabber.sh ###

#!/bin/bash

# usage:  ./grabber.sh . --ignoreDir ".git|.venv|.container-history" --ignoreFiles "*.txt|LICENSE|grabber.sh" --output "snapshot.txt"
DEFAULT_PATH="."
DEFAULT_OUTPUT="directory_snapshot.txt"
# Common directories to ignore by default. Pipe-separated.
DEFAULT_IGNORE_DIRS=".git|node_modules|dist|build|target|vendor|__pycache__"
# Common file patterns/names to ignore by default. Pipe-separated.
DEFAULT_IGNORE_FILES="*.log|*.lock|*.env|package-lock.json|yarn.lock"

# --- Help Message Function ---
# Displays how to use the script.
show_help() {
    cat << EOF
Usage: $(basename "$0") [PATH] [OPTIONS]

Generates a snapshot of a directory, including a file tree and the contents of all
non-ignored files, into a single .txt file.

Arguments:
  PATH                  The path to the directory to scan.
                        (Default: current directory)

Options:
  --ignoreDir "dir1|dir2"   Pipe-separated list of directory names to ignore (case-insensitive).
                            (Default: "$DEFAULT_IGNORE_DIRS")
  --ignoreFiles "pat1|pat2" Pipe-separated list of file patterns to ignore (case-insensitive).
                            (Default: "$DEFAULT_IGNORE_FILES")
  --output "filename.txt"   The name for the output file.
                            (Default: "$DEFAULT_OUTPUT")
  -h, --help                Show this help message and exit.
EOF
}

# --- Argument Parsing ---
# Set variables from defaults
TARGET_PATH="$DEFAULT_PATH"
IGNORE_DIRS="$DEFAULT_IGNORE_DIRS"
IGNORE_FILES="$DEFAULT_IGNORE_FILES"
OUTPUT_FILE="$DEFAULT_OUTPUT"

# Handle the optional positional argument for the path first.
# This allows the user to specify the path without a flag, e.g., `grabber.sh /my/project`
if [[ -n "$1" && ! "$1" =~ ^-- && -d "$1" ]]; then
    TARGET_PATH="$1"
    shift # Consume the argument so the loop below doesn't see it
fi

# Loop through remaining arguments to parse options
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --ignoreDir)
            IGNORE_DIRS="$2"
            shift; shift # Consume option and its value
            ;;
        --ignoreFiles)
            IGNORE_FILES="$2"
            shift; shift
            ;;
        --output)
            OUTPUT_FILE="$2"
            shift; shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            show_help
            exit 1
            ;;
    esac
done

# --- Pre-flight Checks ---
# Ensure the 'tree' command is available, as it's crucial for the script.
if ! command -v tree &> /dev/null; then
    echo "Error: 'tree' command is not installed. Please install it to use this script." >&2
    echo "On Debian/Ubuntu: sudo apt-get install tree" >&2
    echo "On macOS (with Homebrew): brew install tree" >&2
    echo "On Fedora/CentOS: sudo dnf install tree" >&2
    exit 1
fi

## ----- Main Execution -----

echo "Creating snapshot of '$TARGET_PATH'..."

{
    echo "=================================================="
    echo " Directory Snapshot"
    echo "=================================================="
    echo "Source Path:   $(realpath "$TARGET_PATH")"
    echo "Generated on:  $(date)"
    echo "Ignored Dirs:  $IGNORE_DIRS"
    echo "Ignored Files: $IGNORE_FILES"
    echo "--------------------------------------------------"
    echo -e "\n### DIRECTORY TREE ###\n"
} > "$OUTPUT_FILE"

tree -a -F -I "$IGNORE_DIRS|$IGNORE_FILES|$OUTPUT_FILE" "$TARGET_PATH" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

echo "Appending file contents..."

find_args=("$TARGET_PATH")

find_args+=(-not -name "$OUTPUT_FILE")

IFS='|' read -ra DIRS_TO_IGNORE <<< "$IGNORE_DIRS"
for dir in "${DIRS_TO_IGNORE[@]}"; do
    if [ -n "$dir" ]; then
        find_args+=(-not \( -ipath "*/$dir/*" -o -iname "$dir" \))
    fi
done

# Add file ignore patterns to the find command arguments.
IFS='|' read -ra FILES_TO_IGNORE <<< "$IGNORE_FILES"
for file in "${FILES_TO_IGNORE[@]}"; do
    if [ -n "$file" ]; then
        # Exclude files matching the pattern (case-insensitive).
        find_args+=(-not -iname "$file")
    fi
done

find "${find_args[@]}" -type f -print0 | while IFS= read -r -d $'\0' file; do
    relative_path="${file#$TARGET_PATH/}"
    if [[ "$TARGET_PATH" == "." ]]; then
        relative_path="${file#./}"
    fi

    {
        echo "---"
        echo -e "\n### FILE: $relative_path ###\n"
        cat "$file"
        echo "" # Ensure there's a newline at the end of the file content
    } >> "$OUTPUT_FILE"
done

# --- Finalization ---
echo "Snapshot complete! Output written to '$OUTPUT_FILE'."
echo "Total lines in output: $(wc -l < "$OUTPUT_FILE")"


---

### FILE: readme.md ###

# php-contenv v2

`php-contenv` provides pre-configured Docker environments tailored for PHP development, particularly for framework Laravel. The goal is to offer a simple, consistent, and ready-to-go development environment that can be easily integrated into any project without requiring local installations of PHP, Composer, or Node.js. It comes with batteries-included PHP runtime (8.1–8.4) with Nginx/Apache/FrankenPHP, s6-overlay, and a tiny helper (`docky`) to assemble a `docker-compose.yml` from stubs.

Just Recommendation: use this package as a Git submodule in your app repo. That keeps the Docker setup separate and easy to update across projects.

By using `php-contenv` as a Git submodule, you can keep your project's Docker configuration separate and easily update it across multiple projects.



## Purpose

The primary purpose of `php-contenv` is to:

- Dockerfiles & configs for multiple PHP versions and servers (Apache, Nginx, FrankenPHP, Swoole — coming soon).
- Common dev tools/extensions (Composer, Node.js, Xdebug, image libs, DB clients) enabled via build args/env.
- Live code/config via bind mounts (no rebuild for typical edits).
- Simple setup that feels production-ish locally.
- Handy for JS runtime tasks inside the container so the host stays clean.


## Requirements
- Docker + **Docker Compose** (`docker compose …`)
- Optional for `docky`: **yq v4**

## Use in your project

1.  **Add as a Git Submodule:**
```bash
git submodule add https://github.com/techgonia-devjio/php-contenv .docker
git submodule update --init --recursive

# If you don’t want submodules, copy the v2 folder from repo:
#   cp -a v2 YOUR_APP/.docker/v2 or add as submodule then cut the link or remove ´rm -rf .docker/.git´ and also in your root project if exists .gitmodules or .gitsubmodules remove the ref also from there.
```


### 2) Minimal compose (manual)

Create `docker-compose.yml` in your app repo:

```yaml
services:
  app:
    container_name: my-app
    build:
      context: .docker/v2
      dockerfile: php/8.4/nginx/Dockerfile
      # target: development/production
    ports:
      - "${APP_PORT:-8081}:80"
    volumes:
      - .:/var/www/html
    networks:
      - optimesh

networks:
  optimesh:
    driver: bridge
```

> Compose auto-loads `.env`, so `APP_PORT` can live there (a default is provided in the example).

### 3) Or generate compose with **docky** (optional)

```bash
./.docker/v2/docky gen            # writes ./docker-compose.yml from stubs
./.docker/v2/docky list-svc       # see available/enabled service stubs
./.docker/v2/docky add-svc mysql  # enable a service and re-generate compose
```

### 4.) Running container
- **Run the Setup Script:**
    Navigate to your project's root directory and run the setup script if you want to generate docker compose file:
    - **Linux/macOS:** (might require some permission chmod +x ./.docker/v2/docky)
        ```bash
        bash ./.docker/docky gen
        ```
    * **Windows:**
        Use git bash or similar tool which can run bash script(or WSL).
    The script will guide you through selecting your desired PHP version and web server, set up the necessary `docker-compose.yml`.

- **Start the Environment:**
    Once the setup is complete, start your Docker environment:
    ```bash
    docker compose up
    ```
-  **Access Your Application:**
    Your application should now be accessible via the port configured in your `.env` file (defaulting to 8081 if using the example `docker-compose.yml`)

- **Running Artisan Commands:**
    ```bash
    docker exec laravel.app php artisan <command>
    ```

- **Running Composer Commands:**
    ```bash
    docker exec laravel.app composer <command>
    ```

- **Or just Bash it:**
    ```bash
    docker exec laravel.app bash
    ```
 
If the app name couldn't be found, you can run `docker container ls` and copy the container id or name and run `docker exec -it container_name_or_id bash`.


## Advanced: extend without touching the submodule
You can keep project-specific tweaks in a folder like `.docker-snippets/` and mount them via `volumes`:

**Add custom PHP INI**

```yaml
# docker-compose.yml file
services:
  app:
    volumes:
      - ./.docker-snippets/php/custom.ini:/usr/local/etc/php/conf.d/99-custom.ini:ro
```

**Add s6 services via overlays**

```
.docker-snippets/
└─ overlays/
   └─ hello-svc/
      └─ services.d/hello/{run,type,log/run}
```

Mount and activate:

```yaml
services:
  app:
    volumes:
      - ./.docker-snippets/overlays:/opt/overlay:ro
    environment:
      OVERLAY_DIRS: /opt/overlay
```

**Override server configs**

```yaml
services:
  app:
    volumes:
      - ./.docker-snippets/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
```

-- 

## Running some basic tests

From the **repo root**:

```bash
make -C v2/tests               # builds images (nginx/apache/frankenphp) and runs runtime checks
make -C v2/tests runtime-nginx # quick single run
make -C v2/tests docky         # smoke-test the docky CLI
```

What the tests cover:

* Build matrix for 8.4 (and easily extendable) across Nginx/Apache/FrankenPHP
* Runtime probes: HTTP 200, server process, required PHP extensions, Xdebug present but disabled by default
* Overlay boot (example longrun service) + mounted PHP INI override works

## docs
`bash .docker/v2/docky open-doc`

## Troubleshooting

* **`yq` errors**: ensure v4 (`yq --version`).
* **`docker compose` vs `docker-compose`**: this project expects the v2 syntax (`docker compose`).


## Contributing

Contributions are welcome! Please feel free to open issues or submit pull requests.

## License

This project is open-source software licensed under the [MIT License](LICENSE).

---

### FILE: common/runtime/healthchecks/healthcheck-nginx.sh ###

#!/usr/bin/env bash
set -Eeuo pipefail
curl -fsS --max-time 2 http://127.0.0.1/healthz >/dev/null
timeout 2 bash -lc '</dev/tcp/127.0.0.1/9000' 2>/dev/null

---

### FILE: common/runtime/healthchecks/healthcheck-apache.sh ###

#!/bin/sh
set -e
curl -fsS http://127.0.0.1:80/ > /dev/null
---

### FILE: common/runtime/healthchecks/healthcheck-frankenphp.sh ###

#!/bin/sh
set -e
curl -fsS http://127.0.0.1:80/ > /dev/null

---

### FILE: common/runtime/sanity/mani-sanity.sh ###

#!/bin/sh

# Portable system sanity report (BusyBox/GNU friendly)
# this is nailed/geneated by chatgpt
set -e

p() { printf " - %-26s %s\n" "$1" "$2"; }

echo "===== SYSTEM ====="
p "Hostname" "$(hostname)"
p "OS" "$(awk -F= '/^PRETTY_NAME=/{gsub(/"/,"");print $2}' /etc/os-release 2>/dev/null || echo Debian)"
p "Kernel" "$(uname -srmo 2>/dev/null || uname -a)"
p "Time (UTC)" "$(date -u '+%Y-%m-%d %H:%M:%S')"
p "Timezone" "$(readlink -f /etc/localtime 2>/dev/null | sed 's#.*/zoneinfo/##' || echo UTC)"
p "CPU (nproc)" "$(nproc 2>/dev/null || getconf _NPROCESSORS_ONLN)"

# Memory (free -h if present; fallback to /proc/meminfo)
if command -v free >/dev/null 2>&1; then
  line="$(free -h 2>/dev/null | awk 'NR==2{print $2" total, "$3" used, "$4" free"}')"
  [ -n "$line" ] || line="$(free | awk 'NR==2{printf "%.0fMB total, %.0fMB used, %.0fMB free", $2/1024, $3/1024, $4/1024}')"
  p "Mem (free -h)" "$line"
else
  total=$(awk '/MemTotal/{printf "%.0fMB",$2/1024}' /proc/meminfo)
  avail=$(awk '/MemAvailable/{printf "%.0fMB",$2/1024}' /proc/meminfo)
  p "Mem (proc)" "$total total, $avail available"
fi

# Disk
if command -v df >/dev/null 2>&1; then
  dline="$(df -h /var/www/html 2>/dev/null | awk 'NR==2{print $2" total, "$4" free"}')"
  [ -n "$dline" ] && p "Disk /var/www/html" "$dline"
fi

p "User" "$(id -un) (uid=$(id -u), gid=$(id -g))"
p "PUID/PGID env" "${PUID:--}/${PGID:--}"

echo "===== S6 & SERVICES ====="
ov="$(ls -d /package/admin/s6-overlay-* 2>/dev/null | head -n1 || true)"
ver=""; [ -n "$ov" ] && ver="${ov##*/s6-overlay-}"
p "s6 overlay" "${ver:-present}"
sv="$(ls /etc/services.d 2>/dev/null | paste -sd, - || true)"
p "services.d" "${sv:-none}"
echo " - processes:"
printf "  %-3s %-15s %s\n" PID COMMAND COMMAND
ps -o pid= -o comm= -o args= | awk 'NR<=200{printf "  %-3s %-15s %s\n",$1,$2,$3" "$4" "$5}'

echo "===== APACHE ====="
if command -v apache2ctl >/dev/null 2>&1; then
  p "Apache" "$(apache2ctl -v | awk -F/ '/Server version/{print $2}')"
else
  echo " - Apache not present"
fi

echo "===== PHP ====="
php -v | head -n1
p "INI files" "/usr/local/etc/php/conf.d"
echo " - conf.d:"; ls -1 /usr/local/etc/php/conf.d 2>/dev/null | sed 's/^/   * /'
echo " - loaded extensions:"
php -r 'foreach (get_loaded_extensions() as $e) printf("   * %-20s %s\n",$e,phpversion($e)?:PHP_VERSION);'
if php -m | grep -qi xdebug; then
  echo " - xdebug:"
  php -i | awk -F"=> " '/^xdebug\./{printf("   * %-24s %s\n",$1,$2)}' | sort
fi

echo "===== COMPOSER ====="
if command -v composer >/dev/null 2>&1; then
  composer --version
  p "Vendor dir" "$( [ -d vendor ] && echo vendor || echo '(none)' )"
else
  echo " - Composer not installed"
fi

echo "===== JS RUNTIMES ====="
for b in node npm pnpm yarn deno bun; do
  if command -v "$b" >/dev/null 2>&1; then
    v="$($b --version 2>/dev/null | head -n1)"
    [ -z "$v" ] && v="$($b -v 2>/dev/null | head -n1)"
    p "$b" "$v"
  fi
done

echo "===== SWOOLE RUNTIME ====="
if php -m | grep -qiE '^openswoole$|^swoole$'; then
  p "Swoole" "$(php -r 'echo phpversion("openswoole")?:phpversion("swoole")?:"unknown";')"
  p "Document root" "${SWOOLE_DOCUMENT_ROOT:-/var/www/html/public}"
  p "Host" "${SWOOLE_HOST:-localhost}"
  p "Port" "${SWOOLE_PORT:-9501}"
  p "Worker num" "${SWOOLE_WORKER_NUM:-auto}"
  p "Max requests" "${SWOOLE_MAX_REQUESTS:-unlimited}"
  p "Static handler" "$( [ "${SWOOLE_STATIC:-1}" = "1" ] && echo enabled || echo disabled )"
else
  echo " - Swoole / OpenSwoole not installed"
fi

echo "===== FRANKENPHP ====="
if command -v frankenphp >/dev/null 2>&1; then
  v="$(frankenphp --version 2>/dev/null | head -n1)"
  [ -z "$v" ] && v="present"
  printf " - %-26s %s\n" "frankenphp" "$v"
else
  echo " - not present"
fi


echo "===== DB CLIENTS ====="
for d in mysql psql redis-cli mongosh mongo memcached; do
  if command -v "$d" >/dev/null 2>&1; then
    p "$d" "$($d --version 2>/dev/null | head -n1)"
  fi
done

echo "===== ENV (selected) ====="
for k in APP_ENV PUID PGID XDEBUG_MODE XDEBUG_CLIENT_HOST DB_HOST DB_PORT REDIS_HOST REDIS_PORT; do
  v="$(printenv "$k" 2>/dev/null || true)"; [ -n "$v" ] && echo "$k=$v"
done

echo "===== PATH ====="
echo "$PATH" | tr ':' '\n' | sed 's/^/ - /'
echo
echo "OK"

---

### FILE: common/runtime/s6/cont-init.d/20-overlay.sh ###

#!/command/with-contenv /bin/bash

set -e

OVERLAY_DIRS="${OVERLAY_DIRS:-${OVERLAY_DIR:-/opt/overlay}}"

log() { echo "[overlay] $*"; }

normalize() {
  echo "$1" | tr ':' ' '
}

for ODIR in $(normalize "$OVERLAY_DIRS"); do
  [ -d "$ODIR" ] || { log "skip: $ODIR (missing)"; continue; }

  # php/conf.d
  if [ -d "$ODIR/php/conf.d" ]; then
    for f in "$ODIR"/php/conf.d/*.ini; do
      [ -f "$f" ] || continue
      cp -f "$f" "/usr/local/etc/php/conf.d/$(basename "$f")"
      chmod 644 "/usr/local/etc/php/conf.d/$(basename "$f")" || true
      log "$ODIR: php/conf.d -> $(basename "$f")"
    done
  fi

  # php-fpm pools
  if [ -d /usr/local/etc/php-fpm.d ] && [ -d "$ODIR/php/pool.d" ]; then
    for f in "$ODIR"/php/pool.d/*.conf; do
      [ -f "$f" ] || continue
      cp -f "$f" "/usr/local/etc/php-fpm.d/$(basename "$f")"
      log "$ODIR: php-fpm/pool.d -> $(basename "$f")"
    done
  fi

  # nginx conf.d
  if [ -d /etc/nginx ] && [ -d "$ODIR/nginx/conf.d" ]; then
    for f in "$ODIR"/nginx/conf.d/*.conf; do
      [ -f "$f" ] || continue
      cp -f "$f" "/etc/nginx/conf.d/$(basename "$f")"
      log "$ODIR: nginx/conf.d -> $(basename "$f")"
    done
  fi

  # FrankenPHP (Caddy)
  if command -v caddy >/dev/null 2>&1; then
    [ -f "$ODIR/frankenphp/Caddyfile" ] && {
      cp -f "$ODIR/frankenphp/Caddyfile" /etc/caddy/Caddyfile.custom
      log "$ODIR: frankenphp -> Caddyfile.custom"
    }
    [ -d "$ODIR/frankenphp/snippets" ] && {
      mkdir -p /etc/caddy/snippets
      cp -rf "$ODIR/frankenphp/snippets/." /etc/caddy/snippets/
      log "$ODIR: frankenphp -> snippets"
    }
  fi

  # s6 services
  if [ -d "$ODIR/services.d" ]; then
    for svc in "$ODIR"/services.d/*; do
      [ -d "$svc" ] || continue
      name="$(basename "$svc")"
      rm -rf "/etc/services.d/$name"
      cp -a "$svc" "/etc/services.d/$name"
      find "/etc/services.d/$name" -type f -name run -exec chmod +x {} \; || true
      find "/etc/services.d/$name" -type f -path '*/log/run' -exec chmod +x {} \; || true
      log "$ODIR: services.d -> $name"
    done
  fi

  # extra cont-init hooks
  if [ -d "$ODIR/cont-init.d" ]; then
    for s in "$ODIR"/cont-init.d/*; do
      [ -f "$s" ] || continue
      chmod +x "$s" || true
      log "$ODIR: run cont-init $(basename "$s")"
      "$s"
    done
  fi

  # runtime apt
  if [ -s "$ODIR/apt/packages.txt" ] || [ -n "${EXTRA_APT_PACKAGES:-}" ]; then
    log "$ODIR: installing apt packages (dev only)"
    apt-get update
    [ -s "$ODIR/apt/packages.txt" ] && xargs -a "$ODIR/apt/packages.txt" -r apt-get install -y --no-install-recommends
    [ -n "${EXTRA_APT_PACKAGES:-}" ] && apt-get install -y --no-install-recommends $EXTRA_APT_PACKAGES
    rm -rf /var/lib/apt/lists/*
  fi

  # certs
  if [ -d "$ODIR/certs" ]; then
    mkdir -p /usr/local/share/ca-certificates
    find "$ODIR/certs" -type f -name '*.crt' -exec cp -f {} /usr/local/share/ca-certificates/ \;
    update-ca-certificates || true
    log "$ODIR: CA certificates updated"
  fi

  # removals
  if [ -s "$ODIR/remove/list" ]; then
    while IFS= read -r rel; do
      [ -n "$rel" ] || continue
      rm -rf "/$rel" && log "$ODIR: removed /$rel" || true
    done < "$ODIR/remove/list"
  fi
done

log "done"
exit 0
---

### FILE: common/runtime/s6/cont-init.d/10-init.sh ###

#!/command/with-contenv /bin/bash

set -euo pipefail
echo "cont-init:v4 map www-data to host PUID/PGID, fix perms, setup history"

# map IDs
if [[ -n "${PUID:-}" ]]; then
  cu="$(id -u www-data)"; [[ "$cu" != "$PUID" ]] && usermod -o -u "$PUID" www-data
fi
if [[ -n "${PGID:-}" ]]; then
  cg="$(id -g www-data)"; [[ "$cg" != "$PGID" ]] && groupmod -o -g "$PGID" www-data
fi

# writable dirs
for d in /var/www/html/storage /var/www/html/bootstrap/cache; do
  [[ -d "$d" ]] || continue
  chown -R www-data:www-data "$d" || true
  chmod -R ug+rwX "$d" || true
done

# per-project persistent bash history (within bind-mounted workspace)
HISTDIR="/var/www/html/.container-history"
mkdir -p "$HISTDIR"
chown -R "${PUID:-33}:${PGID:-33}" "$HISTDIR" || true
ln -sf "$HISTDIR/bash_history" /root/.bash_history
if [[ -d /var/www ]]; then ln -sf "$HISTDIR/bash_history" /var/www/.bash_history || true; fi

# auto-load history profile for interactive shells
if ! grep -q 'zz-history.sh' /etc/bash.bashrc 2>/dev/null; then
  echo '[ -r /etc/profile.d/zz-history.sh ] && . /etc/profile.d/zz-history.sh' >> /etc/bash.bashrc
fi

# disable queue worker unless enabled
[[ "${ENABLE_QUEUE_WORKER:-false}" = "true" ]] || rm -rf /etc/services.d/queue-worker || true

echo "cont-init:v4 done"

---

### FILE: common/runtime/s6/variants/frankenphp/services.d/frankenphp/type ###

longrun
---

### FILE: common/runtime/s6/variants/frankenphp/services.d/frankenphp/log/run ###

#!/bin/sh
exec /command/s6-log n10 s100000 T /var/log/frankenphp

---

### FILE: common/runtime/s6/variants/frankenphp/services.d/frankenphp/run ###

#!/bin/sh
set -e
: "${HOME:=/root}"
: "${XDG_CONFIG_HOME:=/etc/caddy}"
: "${XDG_DATA_HOME:=/var/lib/caddy}"
: "${XDEBUG_MODE:=off}"
export HOME XDG_CONFIG_HOME XDG_DATA_HOME XDEBUG_MODE
exec /usr/local/bin/frankenphp run --config /etc/caddy/Caddyfile --adapter caddyfile

---

### FILE: common/runtime/s6/variants/nginx/services.d/php-fpm/type ###

longrun
---

### FILE: common/runtime/s6/variants/nginx/services.d/php-fpm/finish ###

#!/bin/sh
exit 0
---

### FILE: common/runtime/s6/variants/nginx/services.d/php-fpm/log/run ###

#!/bin/sh
mkdir -p /var/log/php
exec /command/s6-log n10 s100000 T /var/log/php

---

### FILE: common/runtime/s6/variants/nginx/services.d/php-fpm/run ###

#!/bin/sh

set -e
echo "----> Starting PHP-FPM service..."
# The 'exec' command is crucial for S6 to properly supervise the process.
# '-F' or '--nodaemonize' tells PHP-FPM to run in the foreground.
exec php-fpm -F
---

### FILE: common/runtime/s6/variants/nginx/services.d/nginx/type ###

longrun
---

### FILE: common/runtime/s6/variants/nginx/services.d/nginx/finish ###


---

### FILE: common/runtime/s6/variants/nginx/services.d/nginx/log/run ###

#!/bin/sh
exec /command/s6-log n10 s100000 T /var/log/nginx

---

### FILE: common/runtime/s6/variants/nginx/services.d/nginx/run ###

#!/bin/sh
set -e
echo "----> Starting Nginx service..."
# ensure pid dir
mkdir -p /run/nginx
exec nginx -g 'daemon off;'

---

### FILE: common/runtime/s6/variants/apache/services.d/apache/type ###

longrun
---

### FILE: common/runtime/s6/variants/apache/services.d/apache/finish ###


---

### FILE: common/runtime/s6/variants/apache/services.d/apache/log/run ###

#!/bin/sh
exec /command/s6-log n10 s100000 T /var/log/apache2

---

### FILE: common/runtime/s6/variants/apache/services.d/apache/run ###

#!/bin/sh
set -e

. /etc/apache2/envvars

echo "----> Starting Apache2 service..."
exec /usr/sbin/apache2ctl -D FOREGROUND

---

### FILE: common/runtime/s6/env/APP_ENV ###


---

### FILE: common/runtime/s6/cont-finish.d/99-shutdown-log.sh ###

#!/bin/sh
exit 0
---

### FILE: common/runtime/profile/zz-history.sh ###

#!/usr/bin/env bash

# Persistent per-project shell history (within the mounted workspace)
HISTDIR="${CONTAINER_HISTORY_DIR:-/var/www/html/.container-history}"
HISTFILE="${HISTDIR}/bash_history"
mkdir -p "$HISTDIR" 2>/dev/null || true

export HISTFILE
export HISTSIZE="${HISTSIZE:-50000}"
export HISTFILESIZE="${HISTFILESIZE:-100000}"
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:bg:fg:history:clear"

# Append, and sync on every prompt so parallel shells share history
shopt -s histappend 2>/dev/null || true
case "${PROMPT_COMMAND:-}" in
  *"history -a"*) ;; # already configured
  *) PROMPT_COMMAND="history -a; history -n${PROMPT_COMMAND:+; $PROMPT_COMMAND}";;
esac

---

### FILE: common/runtime/configs/frankenphp/Caddyfile ###

{
    order php_server before file_server
    # auto_https off  # no TLS inside dev container
}

:80 {
    root * /var/www/html/public
    encode zstd gzip

    # Serve PHP via FrankenPHP (no php-fpm needed)
    php_server

    try_files {path} {path}/ /index.php?{query}
    file_server

    log {
        output file /var/log/frankenphp/access.log
        level INFO
    }
}

---

### FILE: common/runtime/configs/php/90-docker-custom.ini ###


; --- Core Settings ---
engine = On
short_open_tag = Off
precision = 14
output_buffering = 4096
zlib.output_compression = Off
implicit_flush = Off
serialize_precision = -1
disable_functions =
disable_classes =

; --- Error Reporting (Development Focus) ---
; Report all errors, and display them directly in the output.
; For production, 'display_errors' should be 'Off' and 'log_errors' should be 'On'.
display_errors = On
display_startup_errors = On
error_reporting = E_ALL
log_errors = On
error_log = /dev/stderr ; Send errors to stderr so Docker can log them
html_errors = On

; --- Resource Limits ---
; Sensible defaults for a local development environment.
max_execution_time = 300
max_input_time = 60
memory_limit = 512M

; --- File Uploads ---
; Allow for larger file uploads, common in development.
post_max_size = 100M
upload_max_filesize = 100M
max_file_uploads = 20

; --- Opcache Settings ---
; Opcache is crucial for performance, even in development.
; These settings are a good balance for dev, avoiding overly aggressive caching.
opcache.enable = 1
opcache.enable_cli = 1
opcache.memory_consumption = 128
opcache.interned_strings_buffer = 64
opcache.max_accelerated_files = 36000
opcache.revalidate_freq = 2 ; In dev, check for file changes every 2 seconds
opcache.fast_shutdown = 1

; --- Session Handling ---
session.save_handler = files
session.save_path = "/tmp"
session.use_cookies = 1
session.cookie_httponly = 1

; --- Date & Time ---
; It's best practice to explicitly set the timezone.
date.timezone = UTC

; --- Assertions ---
; Enable assertions and have them throw exceptions.
zend.assertions = 1
assert.exception = 1

---

### FILE: common/runtime/configs/php/92-docker-php-ext-xdebug.ini ###


[xdebug]
; --- Core Settings ---
; This enables Xdebug's functionality. It must be 'zend_extension', not 'extension'.
zend_extension=xdebug

; --- Mode Configuration ---
; 'develop': Enables development helpers (e.g., enhanced var_dump).
; 'debug': Enables step debugging.
; 'trace': Enables function tracing.
; 'off': Disables all Xdebug functionality.
; You can enable multiple modes by separating them with a comma.
xdebug.mode = off

; --- Step Debugger Settings ---
; 'yes': The debugger will try to connect to your IDE on every request.
;        This is very convenient for development.
; 'trigger': The debugger only activates if a specific trigger is present
;            (e.g., a browser cookie or query parameter). Better for performance.
xdebug.start_with_request = yes

; --- Connection Settings ---
; 'host.docker.internal' is a special DNS name that Docker provides for
; containers to connect back to the host machine where your IDE is running.
xdebug.client_host = host.docker.internal

; The standard port for Xdebug to connect on. Ensure your IDE is listening on this port.
xdebug.client_port = 9003

; --- Output Settings ---
; Set a high value to prevent var_dump() from truncating large arrays/objects.
xdebug.var_display_max_depth = 10
xdebug.var_display_max_children = 256
xdebug.var_display_max_data = 1024

---

### FILE: common/runtime/configs/nginx/nginx.conf ###

user www-data;
worker_processes auto;
pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;


    # server_names_hash_bucket_size 128;
    # request header buffers (large cookies in requests)
    client_header_buffer_size 64k;
    large_client_header_buffers 16 256k;
    # file size or body
    client_max_body_size 50m;

    fastcgi_buffering on;
    fastcgi_buffer_size 512k;
    fastcgi_buffers 128 256k;
    fastcgi_busy_buffers_size 512k;
    fastcgi_temp_file_write_size 512k;

    proxy_buffer_size   128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size   256k;

    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" '
                        'req=$request_length resp=$bytes_sent '
                        'up=$upstream_status ulen=$upstream_response_length';
    access_log /var/log/nginx/access.log main_ext;
    # access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log info;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/xml+rss image/svg+xml;
    gzip_min_length 1024;
    gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


    include /etc/nginx/conf.d/*.conf;
}

---

### FILE: common/runtime/configs/nginx/conf.d/default.conf ###

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    root /var/www/html/public;
    index index.php index.html index.htm;

    client_max_body_size 64m;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        # fastcgi_pass unix:/var/run/php-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # fastcgi_read_timeout 300;

        fastcgi_buffering on;
        fastcgi_buffer_size 512k;
        fastcgi_buffers 128 256k;
        fastcgi_busy_buffers_size 512k;
        fastcgi_temp_file_write_size 512k;
    }

    location = /healthz {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'ok';
    }

    # Disallow access to . files, except .well-known (for Let's Encrypt)
    location ~ /\.(?!well-known).* {
        deny all;
    }

    location ~* \.(jpg|jpeg|gif|png|css|js|ico|svg|woff2?)$ {
        expires 7d;
        access_log off;
        add_header Cache-Control "public";
    }

    location ~ /\.ht {
        deny all;
    }
    location ~ /(app|bootstrap|config|database|resources|routes)/ {
        deny all;
    }

    # Security headers for production
    # add_header X-Frame-Options "DENY";
    # add_header X-Content-Type-Options "nosniff";
    # add_header X-XSS-Protection "1; mode=block";
    # add_header Referrer-Policy "no-referrer-when-downgrade";
    # server_tokens off;
}

---

### FILE: common/runtime/configs/apache/apache2.conf ###

ServerRoot "/etc/apache2"
ServerName localhost
ServerAdmin webmaster@localhost


Mutex file:${APACHE_LOCK_DIR} default
PidFile ${APACHE_PID_FILE}
Timeout 300
KeepAlive On
MaxKeepAliveRequests 100
KeepAliveTimeout 5

User ${APACHE_RUN_USER}
Group ${APACHE_RUN_GROUP}

# HostnameLookups Off
AccessFileName .htaccess

<Directory /var/www/html/public>
    Options Indexes FollowSymLinks
    AllowOverride All
    Require all granted
</Directory>


ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog ${APACHE_LOG_DIR}/access.log combined
LogLevel warn

# Include module configuration:
Include ports.conf
IncludeOptional mods-enabled/*.load
IncludeOptional mods-enabled/*.conf
IncludeOptional conf-enabled/*.conf
IncludeOptional sites-enabled/*.conf


<FilesMatch "^\.ht">
	Require all denied
</FilesMatch>

LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %O" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# Include the virtual host configurations:
IncludeOptional sites-enabled/*.conf

# Include generic snippets of statements
IncludeOptional conf-enabled/*.conf
<IfModule mod_dir.c>
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</IfModule>

---

### FILE: common/runtime/configs/apache/sites-available/000-default.conf ###

<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html/public

    <Directory /var/www/html/public>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    <Directory /var/www/html>
        Require all denied
    </Directory>
    <Directory /var/www/html/public>
        Require all granted
    </Directory>

</VirtualHost>

---

### FILE: common/build/scripts/mani-php-ext-images.sh ###

#!/bin/sh
# ==============================================================================
# Domain: IMAGE/GRAPHICS EXTENSIONS (GD, Imagick, Vips)
# Modes:
#   --build   : install -dev, compile gd, pecl install imagick/vips
#   --runtime : install runtime libs (no -dev)
# Controlled by env: PHP_EXT_GD, PHP_EXT_IMAGICK, PHP_EXT_VIPS
# ==============================================================================
set -e
MODE="${1:---build}"
export DEBIAN_FRONTEND=noninteractive

if [ "$MODE" = "--build" ]; then
  PKG=""
  add(){ echo " $PKG " | grep -q " $1 " || PKG="$PKG $1"; }

  if [ "${PHP_EXT_GD:-false}" = "true" ]; then
    add "libpng-dev libjpeg62-turbo-dev libfreetype6-dev libwebp-dev libxpm-dev"
  fi
  [ "${PHP_EXT_IMAGICK:-false}" = "true" ] && add "libmagickwand-dev libmagickcore-6.q16-6-extra imagemagick"
  [ "${PHP_EXT_VIPS:-false}" = "true" ]    && add "libvips-dev libvips-tools"

  [ -n "$PKG" ] && { apt-get update && apt-get install -y --no-install-recommends $PKG && apt-get clean && rm -rf /var/lib/apt/lists/*; }

  [ "${PHP_EXT_GD:-false}" = "true" ] && { docker-php-ext-configure gd --enable-gd --with-freetype --with-jpeg --with-webp && docker-php-ext-install -j"$(nproc)" gd; } || true
  [ "${PHP_EXT_IMAGICK:-false}" = "true" ] && { pecl install imagick && docker-php-ext-enable imagick; } || true
  [ "${PHP_EXT_VIPS:-false}" = "true" ]    && { pecl install vips && docker-php-ext-enable vips; } || true

  exit 0
fi

# RUNTIME libs
PKG=""
add(){ echo " $PKG " | grep -q " $1 " || PKG="$PKG $1"; }

[ "${PHP_EXT_GD:-false}" = "true" ]       && add "libpng16-16 libjpeg62-turbo libfreetype6 libwebp7 libxpm4"
[ "${PHP_EXT_IMAGICK:-false}" = "true" ]  && add "libmagickwand-6.q16-6 libmagickcore-6.q16-6-extra imagemagick"
[ "${PHP_EXT_VIPS:-false}" = "true" ]     && add "libvips42 libvips-tools"

[ -n "$PKG" ] && { apt-get update && apt-get install -y --no-install-recommends $PKG && apt-get clean && rm -rf /var/lib/apt/lists/*; }

---

### FILE: common/build/scripts/mani-php-ext-core.sh ###

#!/bin/sh

# Domain: CORE PHP EXTENSIONS
# Modes: --build (compile/pecl) | --runtime (runtime libs + ini toggles)
set -e
MODE="${1:---build}"
export DEBIAN_FRONTEND=noninteractive

if [ "$MODE" = "--build" ]; then
  PKG=""
  add(){ echo " $PKG " | grep -q " $1 " || PKG="$PKG $1"; }

  [ "${PHP_EXT_INTL:-false}" = "true" ]   && add "libicu-dev"
  [ "${PHP_EXT_SOAP:-false}" = "true" ]   && add "libxml2-dev"
  [ "${PHP_EXT_ZIP:-false}" = "true" ]    && add "libzip-dev"
  [ "${PHP_EXT_XSL:-false}" = "true" ]    && add "libxslt1-dev"
  [ "${PHP_EXT_GMP:-false}" = "true" ]    && add "libgmp-dev"

  [ -n "$PKG" ] && { apt-get update && apt-get install -y --no-install-recommends $PKG && apt-get clean && rm -rf /var/lib/apt/lists/*; }

  docker-php-ext-install -j"$(nproc)" opcache
  [ "${PHP_EXT_INTL:-false}" = "true" ]   && docker-php-ext-install -j"$(nproc)" intl || true
  [ "${PHP_EXT_SOAP:-false}" = "true" ]   && docker-php-ext-install -j"$(nproc)" soap || true
  [ "${PHP_EXT_ZIP:-false}" = "true" ]    && docker-php-ext-install -j"$(nproc)" zip  || true
  [ "${PHP_EXT_XSL:-false}" = "true" ]    && docker-php-ext-install -j"$(nproc)" xsl  || true
  [ "${PHP_EXT_GMP:-false}" = "true" ]    && docker-php-ext-install -j"$(nproc)" gmp  || true
  [ "${PHP_EXT_BCMATH:-false}" = "true" ] && docker-php-ext-install -j"$(nproc)" bcmath || true
  [ "${PHP_EXT_EXIF:-false}" = "true" ]   && docker-php-ext-install -j"$(nproc)" exif || true
  [ "${PHP_EXT_PCNTL:-false}" = "true" ]  && docker-php-ext-install -j"$(nproc)" pcntl || true

  # Xdebug: install only; ini controls activation at runtime
  [ "${PHP_EXT_XDEBUG:-true}" = "true" ] && pecl install xdebug || true

  # Swoole / OpenSwoole (optional)
  if [ "${PHP_EXT_SWOOLE:-false}" = "true" ]; then
    # try OpenSwoole first (preferred), then Swoole
    (pecl install -o -f openswoole && docker-php-ext-enable openswoole) || \
    (pecl install -o -f swoole      && docker-php-ext-enable swoole)
  fi
  
  exit 0
fi

# RUNTIME
PKG=""
add(){ echo " $PKG " | grep -q " $1 " || PKG="$PKG $1"; }

[ "${PHP_EXT_INTL:-false}" = "true" ] && add "libicu72"
[ "${PHP_EXT_SOAP:-false}" = "true" ] && add "libxml2"
[ "${PHP_EXT_ZIP:-false}" = "true" ]  && add "libzip4"
[ "${PHP_EXT_XSL:-false}" = "true" ]  && add "libxslt1.1"
[ "${PHP_EXT_GMP:-false}" = "true" ]  && add "libgmp10"

[ -n "$PKG" ] && { apt-get update && apt-get install -y --no-install-recommends $PKG && apt-get clean && rm -rf /var/lib/apt/lists/*; }

# If Xdebug disabled, drop ini to avoid loader warning
[ "${PHP_EXT_XDEBUG:-true}" = "true" ] || rm -f /usr/local/etc/php/conf.d/92-docker-php-ext-xdebug.ini || true



echo "----> Core PHP extensions installed successfully."

---

### FILE: common/build/scripts/mani-docker-install-js-runtime.sh ###

#!/bin/bash

set -euo pipefail

: "${JS_RUNTIME_NODE_VERSION:=lts}"
: "${JS_RUNTIME_REQUIRE_NODE:=true}"
: "${JS_RUNTIME_REQUIRE_DENO:=false}"
: "${JS_RUNTIME_REQUIRE_BUN:=false}"
: "${JS_RUNTIME_REQUIRE_YARN:=false}"
: "${JS_RUNTIME_REQUIRE_PNPM:=false}"

install_node() {
  echo "----> Installing Node.js (version: ${JS_RUNTIME_NODE_VERSION})..."
  export NVM_DIR="/usr/local/nvm"
  mkdir -p "$NVM_DIR"
  if [ ! -s "$NVM_DIR/nvm.sh" ]; then
    curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
  fi

  bash -lc "\
    export NVM_DIR=$NVM_DIR && \
    . \"$NVM_DIR/nvm.sh\" && \
    nvm install \"$JS_RUNTIME_NODE_VERSION\" && \
    nvm alias default \"$JS_RUNTIME_NODE_VERSION\" && \
    nvm use default && \
    corepack enable && \
    echo '      Node version: ' \"\$(node -v)\" && \
    echo '      npm version:  ' \"\$(npm -v)\" && \
    ln -sf \"\$(nvm which node)\" /usr/local/bin/node && \
    ln -sf \"\$(dirname \$(nvm which node))/npm\" /usr/local/bin/npm && \
    ln -sf \"\$(dirname \$(nvm which node))/npx\" /usr/local/bin/npx \
  "
}

install_deno() {
  echo "----> Installing Deno..."
  if [ ! -x /usr/local/bin/deno ]; then
    curl -fsSL https://deno.land/x/install/install.sh | sh
    ln -sf /root/.deno/bin/deno /usr/local/bin/deno
  fi
}

install_bun() {
  echo "----> Installing Bun..."
  if [ ! -x /usr/local/bin/bun ]; then
    curl -fsSL https://bun.sh/install | bash
    ln -sf /root/.bun/bin/bun /usr/local/bin/bun
  fi
}

install_yarn() {
  
  bash -lc "
    export NVM_DIR=/usr/local/nvm && \
    . \"$NVM_DIR/nvm.sh\" && \
    if command -v yarn >/dev/null 2>&1; then
      echo '----> Skipping Yarn: already installed (version: ' \"\$(yarn --version)\" ')';
    elif command -v npm >/dev/null 2>&1; then
      echo '----> Installing Yarn via npm...';
      npm install -g yarn && \
      echo '      Yarn version: ' \"\$(yarn --version)\";
    else
      echo '      Skipping Yarn: npm not available';
    fi
  "
}

install_pnpm() {
  bash -lc "\
    export NVM_DIR=/usr/local/nvm && \
    . \"$NVM_DIR/nvm.sh\" && \
    if command -v corepack >/dev/null; then \
      echo '----> Activating pnpm via Corepack...'; \
      corepack prepare pnpm@latest --activate && \
      echo '      pnpm version: ' \"\$(pnpm --version)\"; \
    elif command -v npm >/dev/null; then \
      echo '----> Installing pnpm via npm...'; \
      npm install -g pnpm && \
      echo '      pnpm version: ' \"\$(pnpm --version)\"; \
    else \
      echo '      Skipping pnpm: npm not available'; \
    fi \
  "
}

echo "----> Checking which JS runtimes to install..."
[ "$JS_RUNTIME_REQUIRE_NODE" = "true" ] && install_node
[ "$JS_RUNTIME_REQUIRE_DENO" = "true" ] && install_deno
[ "$JS_RUNTIME_REQUIRE_BUN"  = "true" ] && install_bun

if [ "$JS_RUNTIME_REQUIRE_NODE" = "true" ]; then
  [ "$JS_RUNTIME_REQUIRE_YARN" = "true" ] && install_yarn
  [ "$JS_RUNTIME_REQUIRE_PNPM" = "true" ] && install_pnpm
fi


# Add all relevant paths to the system profile to make them available in all shells
# This ensures that when you 'docker exec' into the container, the commands are available.
# echo "
# # Add JS Runtime Paths
# export NVM_DIR=\"/usr/local/nvm\"
# [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
# export DENO_INSTALL=\"/root/.deno\"
# export PATH=\"\$DENO_INSTALL/bin:\$PATH\"
# export BUN_INSTALL=\"/root/.bun\"
# export PATH=\"\$BUN_INSTALL/bin:\$PATH\"
# " > /etc/profile.d/js_runtimes.sh

# Do not rely on /etc/profile.d inside containers; symlinks above guarantee availability.
echo "----> JS runtime installation complete."

---

### FILE: common/build/scripts/mani-php-ext-db.sh ###

#!/bin/sh

# ==============================================================================
# Domain: DATABASE CLIENTS & EXTENSIONS (MySQL, PostgreSQL, SQLite, Redis, Memcached, MongoDB)
# Modes:
#   --build   : add repos if needed, install -dev, compile/pecl, clients
#   --runtime : install runtime libs only (no -dev)
# ==============================================================================

set -eu
MODE="${1:---build}"
export DEBIAN_FRONTEND=noninteractive
[ "${DEBUG:-0}" = "1" ] && set -x && (env | grep -E '^(INSTALL_DB|DB_PGSQL|PHP_EXT_)' | sort || true)

# safe dedup without grep (avoids set -e pitfalls)
add() {
  case " ${PKG:-} " in *" $1 "*) ;; *) PKG="${PKG:-} $1" ;; esac
}

if [ "$MODE" = "--build" ]; then
  # Repos & clients
  if [ "${INSTALL_DB_PGSQL_CLIENT:-false}" = "true" ]; then
    apt-get update && apt-get install -y curl gnupg lsb-release && \
    curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql-key.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/postgresql-key.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && apt-get install -y "postgresql-client-${DB_PGSQL_CLIENT_VERSION:-18}"
  fi
  if [ "${INSTALL_DB_MYSQL_CLIENT:-false}" = "true" ]; then
    apt-get update && apt-get install -y default-mysql-client
  fi

  # Build deps
  PKG=""
  [ "${PHP_EXT_PDO_PGSQL:-false}" = "true" ] && add libpq-dev
  if [ "${PHP_EXT_MEMCACHED:-false}" = "true" ]; then
    add libmemcached-dev; add zlib1g-dev; add libzstd-dev; add libevent-dev
  fi
  [ "${PHP_EXT_MONGODB:-false}" = "true" ] && add libssl-dev
  if [ "${PHP_EXT_SQLITE:-false}" = "true" ] || [ "${PHP_EXT_PDO_SQLITE:-false}" = "true" ]; then
    add libsqlite3-dev
  fi
  if [ -n "${PKG:-}" ]; then
    apt-get update && apt-get install -y --no-install-recommends $PKG && apt-get clean && rm -rf /var/lib/apt/lists/*
  fi

  # Core ext compile
  [ "${PHP_EXT_PDO_MYSQL:-false}" = "true" ]  && docker-php-ext-install -j"$(nproc)" pdo_mysql || true
  [ "${PHP_EXT_PDO_PGSQL:-false}" = "true" ]  && docker-php-ext-install -j"$(nproc)" pdo_pgsql || true
  [ "${PHP_EXT_SQLITE:-false}" = "true" ]     && docker-php-ext-install -j"$(nproc)" sqlite3   || true
  [ "${PHP_EXT_PDO_SQLITE:-false}" = "true" ] && docker-php-ext-install -j"$(nproc)" pdo_sqlite || true

  # PECL ext
  [ "${PHP_EXT_REDIS:-false}" = "true" ]      && { pecl install -o -f redis     && docker-php-ext-enable redis; }     || true
  [ "${PHP_EXT_MEMCACHED:-false}" = "true" ]  && { pecl install -o -f memcached && docker-php-ext-enable memcached; } || true
  [ "${PHP_EXT_MONGODB:-false}" = "true" ]    && { pecl install -o -f mongodb   && docker-php-ext-enable mongodb; }   || true
  exit 0
fi

# --runtime: libs only
PKG=""
[ "${PHP_EXT_PDO_PGSQL:-false}" = "true" ] && add libpq5
if [ "${PHP_EXT_MEMCACHED:-false}" = "true" ]; then
  add libmemcached11; add libzstd1; add libevent-2.1-7
fi
[ "${PHP_EXT_MONGODB:-false}" = "true" ] && add libssl3
if [ "${PHP_EXT_SQLITE:-false}" = "true" ] || [ "${PHP_EXT_PDO_SQLITE:-false}" = "true" ]; then
  add libsqlite3-0
fi
if [ -n "${PKG:-}" ]; then
  apt-get update && apt-get install -y --no-install-recommends $PKG && apt-get clean && rm -rf /var/lib/apt/lists/*
fi

---

### FILE: common/build/scripts/mani-docker-install-system-deps.sh ###

#!/bin/sh
set -e
export DEBIAN_FRONTEND=noninteractive
apt-get update
apt-get install -y --no-install-recommends \
  apt-transport-https ca-certificates gnupg lsb-release curl git nano zip unzip \
  gosu procps sqlite3 libcap2-bin libzip-dev libssl-dev build-essential \
  pkg-config autoconf dnsutils locales locales-all acl dos2unix
apt-get clean && rm -rf /var/lib/apt/lists/*
echo "----> System dependencies installed successfully."

---

### FILE: public/index.php ###

<?php
echo "<h1>Hello World</h1>";
echo phpinfo();

---

### FILE: public/34.php ###

<?php

echo "<h1>Hello World</h1>";

echo "File: " . __FILE__ . "<br>";
echo "Line: " . __LINE__ . "<br>";
echo "Directory: " . __DIR__ . "<br>";
echo "Current Time: " . date('Y-m-d H:i:s') . "<br>";
echo "Path Info: " . pathinfo(__FILE__, PATHINFO_BASENAME) . "<br>";
echo "PHP SAPI: " . php_sapi_name() . "<br>";
echo "PHP version: " . phpversion() . "<br>";
echo "Loaded extensions: " . implode(", ", get_loaded_extensions()) . "<br>";
echo "Server Software: " . ($_SERVER['SERVER_SOFTWARE'] ?? 'N/A') . "<br>";
echo "Document Root: " . ($_SERVER['DOCUMENT_ROOT'] ?? 'N/A') . "<br>";
echo "Request URI: " . ($_SERVER['REQUEST_URI'] ?? 'N/A') . "<br>";

?>

---

### FILE: public/text.txt ###

This is test text file.
---

### FILE: examples/docker-compose-files/docker-compose.healthcheck.yml ###

# Simple Docker Compose file for a single PHP app using Nginx
# This example uses PHP 8.4 with Nginx in development mode.
# It mounts the current directory into the container for live development.
# services.app.build.context points to the .docker/v2 directory, where docker can see downwards all the files for building the image.
# services.app.ports: 8080:80 maps port 8080 on the host to port 80 in the container. App runs on port 80 in the container and can be access outside using port 8080.
services:
  app:
    container_name: my-app
    build:
      context: .docker/v2
      dockerfile: php/8.4/nginx/Dockerfile
      args:
        ENABLE_HEALTHCHECK: "true"
    environment:
      ENABLE_HEALTHCHECK: "true"
    healthcheck:
      test: [ "CMD", "/usr/local/bin/healthcheck-nginx.sh" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
      # disable: false or just this to disable
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
    networks:
      - maninet
# Define the shared network for all services
networks:
  maninet:
    driver: bridge


---

### FILE: examples/docker-compose-files/docker-compose.js.yml ###

services:
  app:
    container_name: my-app
    build:
      context: .docker/v2
      dockerfile: php/8.4/nginx/Dockerfile
      args:
        # --- When building the image, we tell to add also node v22 version ---
        JS_RUNTIME_REQUIRE_NODE: ${JS_RUNTIME_REQUIRE_NODE:-true}
        JS_RUNTIME_NODE_VERSION: ${JS_RUNTIME_NODE_VERSION:-22}
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
    networks:
      - maninet
# Define the shared network for all services
networks:
  maninet:
    driver: bridge


---

### FILE: examples/docker-compose-files/docker-compose.simple.yml ###

# Simple Docker Compose file for a single PHP app using Nginx
# This example uses PHP 8.4 with Nginx in development mode.
# It mounts the current directory into the container for live development.
# services.app.build.context points to the .docker/v2 directory, where docker can see downwards all the files for building the image.
# services.app.ports: 8080:80 maps port 8080 on the host to port 80 in the container. app runs on port 80 in the container and can be access outside using port 8080.
services:
  app:
    container_name: my-app
    build:
      context: .docker/v2
      dockerfile: php/8.4/nginx/Dockerfile
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
    networks:
      - maninet
# Define the shared network for all services
networks:
  maninet:
    driver: bridge


---

### FILE: examples/.docker-snippets/overlays/helloworld-svc/services.d/hello-wolrd/type ###

longrun
---

### FILE: examples/.docker-snippets/overlays/helloworld-svc/services.d/hello-wolrd/finish ###

#!/usr/bin/env bash

echo "[hello-world] Custom service is shutting down."
exit 0

---

### FILE: examples/.docker-snippets/overlays/helloworld-svc/services.d/hello-wolrd/run ###

#!/usr/bin/env bash

set -e
echo "[hello-world] Custom service started. Logging a message every 10 seconds."

while true; do
  echo "[hello-world] Hello from your custom overlay service! The time is $(date)."
  sleep 10
done

---

### FILE: examples/.docker-snippets/php/custom.ini ###

; demo php.ini mounted via .docker-snippets
memory_limit = 1024M
upload_max_filesize = 128M
post_max_size = 128M
; keep xdebug installed but off for speed unless you need it
; xdebug.mode = off

---

### FILE: examples/.docker-snippets/readme.md ###

# Extend the Docker env — examples (not auto-applied)

This folder shows *how you could* extend the environment in your **project**, without changing the submodule.

- **php/** — put `.ini` files here (e.g., `custom.ini`). Docky auto-mounts `.docker-snippets/php/*.ini` to `/usr/local/etc/php/conf.d/` when you run `./.docker/v2/docky gen`.
- **overlays/** — demo overlays you can copy into your project at `.docker-snippets/overlays/<name>/…`. Overlays are applied at container boot by `cont-init.d/20-overlay.sh`.
- **scripts/** — random helper scripts you might copy/use inside containers.

> These are **examples only**. They don’t change your stack until you copy them where Docky looks.

----

In your root proejct you can create any folder .i.e .docker-snippets and add the docker related files their, if possibilty organized and then you can mount each file in the docker compose "app" service under volumes section.


example: you want to add a s6-service. In .docker-snippets, you create overlays/helloworld-svc/services.d/hello-world/{run,type} and then in docker compose file 

    volumes:
      - .:/var/www/html
      - ./.docker-snippets/overlays:/opt/overlay:ro   # <— mount all your overlays
    environment:
      OVERLAY_DIRS: /opt/overlay             # <— tells init where to look


for custom php.ini files

    volumes:
      - .:/var/www/html
      - ./.docker-snippets/php/custom.ini:/usr/local/etc/php/conf.d/99-custom.ini:ro  # <- changing or editing php ini file
      - ./.docker-snippets/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro          # <- overriding nginx conf server when using nginx server 
---

### FILE: examples/.docker-snippets/scripts/hw.sh ###

#!/usr/bin/env bash

echo "Hello, world!"

---

### FILE: scripts/lint-shell.sh ###

#!/usr/bin/env bash
set -euo pipefail

shopt -s nullglob
fail=0

while IFS= read -r -d '' f; do
  case "$f" in
    *.sh|*/run|*/finish|*/log/run)
      bash -n "$f" || { echo "BASH SYNTAX ERROR: $f"; fail=1; }
      ;;
  esac
done < <(find common -type f -print0)

exit $fail

---

### FILE: scripts/smoke.sh ###

#!/usr/bin/env bash
set -euo pipefail

# Usage: scripts/smoke.sh php/8.4/nginx/Dockerfile development 8088
DF="${1:-php/8.4/nginx/Dockerfile}"
TARGET="${2:-development}"
PORT="${3:-8088}"
TAG="mani-smoke-$(basename "$(dirname "$DF")")-$(basename "$(dirname "$(dirname "$DF")")")-$TARGET-$$"

echo "==> Building $TAG from $DF ($TARGET)"
docker build -f "$DF" --target "$TARGET" -t "$TAG" .

cid=""
cleanup() { [[ -n "$cid" ]] && docker rm -f "$cid" >/dev/null 2>&1 || true; }
trap cleanup EXIT

echo "==> Running on :$PORT"
cid=$(docker run -d -p "$PORT:80" -v "$PWD:/var/www/html" --name "$TAG" "$TAG")
# wait for port
for i in {1..30}; do
  if curl -sS "http://localhost:$PORT" >/dev/null; then break; fi
  sleep 1
done

echo "==> HTTP probe"
curl -sS -D - "http://localhost:$PORT" -o /dev/null | sed -n '1,10p'

echo "==> Sanity"
docker exec -it "$cid" mani-sanity || true

echo "==> PHP extensions"
docker exec -it "$cid" php -m | sed -n '1,200p'

echo "==> OK"

---

### FILE: scripts/ci-matrix.sh ###

#!/usr/bin/env bash
set -euo pipefail

VERSIONS=(8.1 8.2 8.3 8.4)
VARIANTS=(apache nginx frankenphp)
TARGET=development
PORT_BASE=9000

# for v in "${VERSIONS[@]}"; do
#   for var in "${VARIANTS[@]}"; do
#     DF="php/$v/$var/Dockerfile"
#     [[ -f "$DF" ]] || { echo "skip $DF"; continue; }
#     PORT=$((PORT_BASE++))
#     echo "---- $v/$var -> $PORT ----"
#     bash scripts/smoke.sh "$DF" "$TARGET" "$PORT"
#   done
# done

---

### FILE: scripts/validate-s6.sh ###

#!/usr/bin/env bash
set -euo pipefail
err=0

# executable bits
while IFS= read -r -d '' f; do
  if [[ ! -x "$f" ]]; then
    echo "FIXME: not executable: $f"
    err=1
  fi
done < <(find common/runtime/s6 -type f \( -name run -o -name finish \) -print0)

# service types present
while IFS= read -r -d '' d; do
  if [[ ! -f "$d/type" ]]; then
    echo "FIXME: missing type file in $d"
    err=1
  fi
done < <(find common/runtime/s6/variants -maxdepth 3 -type d -name '[a-z]*' -path '*/services.d/*' -print0)

# CRLF check
if git ls-files -z | xargs -0 file | grep -E "CRLF|CR line terminators" >/dev/null 2>&1; then
  echo "WARN: CRLF found in repo. Convert to LF for s6 scripts."
fi

exit $err

---

### FILE: scripts/lint-dockerfiles.sh ###

#!/usr/bin/env bash
set -euo pipefail

# Lightweight checks without hadolint
fail=0
while IFS= read -r -d '' df; do
  grep -q '^FROM ' "$df" || { echo "Dockerfile missing FROM: $df"; fail=1; }
  grep -q 'SHELL \["/bin/bash"' "$df" || echo "INFO: consider Bash shell for pipefail in $df"
done < <(find php -name Dockerfile -print0)

exit $fail

---

### FILE: docker-compose.test.yml ###


services:
  # The main application service, built from our custom Dockerfile
  app:
    container_name: mani-app-apache
    build:
      context: .
      #dockerfile: php/8.4/apache/Dockerfile
      dockerfile: php/8.4/nginx/Dockerfile
      target: development
      args:
        # --- Build-Time Arguments ---
        # These arguments control what gets installed in the image.
        # They are all read from the .env file, with sensible defaults.

        # --- JS Runtime Configuration ---
        JS_RUNTIME_REQUIRE_NODE: ${JS_RUNTIME_REQUIRE_NODE:-true}
        JS_RUNTIME_NODE_VERSION: ${JS_RUNTIME_NODE_VERSION:-22}
        JS_RUNTIME_REQUIRE_DENO: ${JS_RUNTIME_REQUIRE_DENO:-true}
        JS_RUNTIME_REQUIRE_BUN: ${JS_RUNTIME_REQUIRE_BUN:-true}
        JS_RUNTIME_REQUIRE_YARN: ${JS_RUNTIME_REQUIRE_YARN:-true}
        JS_RUNTIME_REQUIRE_PNPM: ${JS_RUNTIME_REQUIRE_PNPM:-true}

        # --- Database Client & Extension Configuration ---
        # NOTE: The logic has been simplified to apply defaults directly.
        INSTALL_DB_PGSQL_CLIENT: ${INSTALL_POSTGRES_STACK:-false}
        DB_PGSQL_CLIENT_VERSION: ${DB_PGSQL_CLIENT_VERSION:-17}
        INSTALL_DB_MYSQL_CLIENT: ${INSTALL_MYSQL_STACK:-true}
        PHP_EXT_PDO_PGSQL: ${INSTALL_POSTGRES_STACK:-false}
        PHP_EXT_PDO_MYSQL: ${INSTALL_MYSQL_STACK:-true}

        # --- Other PHP Extension Configuration ---
        PHP_EXT_MONGODB: ${PHP_EXT_MONGODB:-false}
        PHP_EXT_REDIS: ${PHP_EXT_REDIS:-false}
        PHP_EXT_SWOOLE: ${PHP_EXT_SWOOLE:-true}
        PHP_EXT_MEMCACHED: ${PHP_EXT_MEMCACHED:-false}
        PHP_EXT_GD: ${PHP_EXT_GD:-true}
        PHP_EXT_IMAGICK: ${PHP_EXT_IMAGICK:-true}
        PHP_EXT_VIPS: ${PHP_EXT_VIPS:-true}
        PHP_EXT_XDEBUG: ${PHP_EXT_XDEBUG:-true}

    ports:
      - "${APP_PORT:-8081}:80"
    volumes:
      # Mount your application code into the container for live development.
      - .:/var/www/html
      # - ./xyz:/opt/overlay:ro  
      # Optional: ad-hoc apt installs at runtime (dev only)
      # EXTRA_APT_PACKAGES: "git jq"
    
    # healthcheck:
      # test: ["CMD", "/usr/local/bin/healthcheck-apache.sh"]
      # interval: 30s
      # timeout: 3s
      # retries: 5
    environment:
      # --- Run-Time Environment Variables ---
      # These variables configure the running container.
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      SWOOLE_WATCH: "1"
      ENABLE_QUEUE_WORKER: ${ENABLE_QUEUE_WORKER:-false}

      DISABLE_XDEBUG_IN_SWOOLE: ${DISABLE_XDEBUG_IN_SWOOLE:-1}
      SWOOLE_WORKER_NUM: auto
      SWOOLE_MAX_REQUESTS: "20000"
      SWOOLE_HTTP_COMPRESSION: "1"

      XDEBUG_MODE: ${XDEBUG_MODE:-off}
      XDEBUG_CLIENT_HOST: ${XDEBUG_CLIENT_HOST:-host.docker.internal}
      # Pass connection details for other services
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-laravel}
      DB_USERNAME: ${DB_USERNAME:-user}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    # depends_on:
    #   - db
    #   - redis
    networks:
      - maninet

# Define the shared network for all services
networks:
  maninet:
    driver: bridge

# Define the persistent volume for the database
volumes:
  db_data:
    driver: local

---

### FILE: readme.dev.md ###

# Developer Guide — php-contenv v2

This guide is for maintainers and contributors to **php-contenv v2**. The main `readme.md` is end-user facing; this explains how v2 is organized, how `docky` works internally, and how to test, extend, and release changes.

## 1) Core principles

1. **Simplicity** – end users can copy a minimal compose or run `docky gen` or see the v2/examples.
2. **Consistency** – same shape across PHP versions and servers. Its redundant to repeat dockerfiles with different version but sometimes its easy to maintain or for future upgrade
3. **Speed** – fast rebuilds; common layers are shared; no host installs required.
4. **Flexibility** – sensible defaults, but easy to extend (overlays, snippets, extra services).

---

## 2) Repository layout (v2)

```
v2/
├── common/
│   ├── build/scripts/                 # build-time helpers
│   │   ├── mani-docker-install-js-runtime.sh
│   │   ├── mani-docker-install-system-deps.sh
│   │   ├── mani-php-ext-core.sh
│   │   ├── mani-php-ext-db.sh
│   │   └── mani-php-ext-images.sh
│   └── runtime/                       # runtime bits included in final images
│       ├── configs/                   # nginx/apache/php configs
│       ├── healthchecks/              # healthcheck scripts
│       ├── profile/zz-history.sh
│       ├── s6/                        # s6-overlay: cont-init.d / services.d variants
│       └── sanity/mani-sanity.sh
├── php/
│   ├── 8.1/{nginx,apache,frankenphp}/Dockerfile
│   ├── 8.2/{nginx,apache,frankenphp}/Dockerfile
│   ├── 8.3/{nginx,apache,frankenphp}/Dockerfile
│   └── 8.4/{nginx,apache,frankenphp}/Dockerfile
├── overlays/                          # built-in example overlays (can be enabled via compose)
│   ├── locales/cont-init.d/10-locales.sh
│   └── queue-worker/services.d/queue-worker/{run,type,log/run}
├── stubs/services/                    # compose stubs used by docky
│   ├── app.yml
│   ├── mysql.yml
│   ├── to add more stubs yet, such as postgresql,redis,mailpit,keyclock etc which will be the docker services 
│   └── typesense.yml
├── docs/                              # docs can be run via mkdocs
├── public/                            # tiny probe app for HTTP 200 in tests
├── scripts/                           # maintainer utilities (lint/smoke etc.)
│   ├── ci-matrix.sh
│   ├── lint-dockerfiles.sh
│   ├── lint-shell.sh
│   ├── smoke.sh
│   └── validate-s6.sh
├── tests/                             # local test harness (no CI required)
│   ├── Makefile
│   ├── fixtures/ (overlay + php ini)
│   ├── scripts/{test-matrix.sh,test-runtime.sh}
│   └── test-docky.sh
├── docky                              # v2 docky (yq v4; merges stubs)
├── docky.yml                          # internal defaults for docky (devs only)
├── docker-compose.test.yml            # internal/testing compose
└── readme.md                          # user docs (how to consume)
```

**Key ideas**

* **common/** holds everything shared by all images.
* **php/** contains the server variants per PHP version.
* **overlays/** are optional runtime additions (applied by `cont-init.d/20-overlay.sh` when mounted).
* **stubs/services/** are YAML slices assembled by `docky gen`.

---

## 3) Images & build args (what you can toggle)

Dockerfiles accept build args to include features without editing Dockerfiles:

-  DB clients: `INSTALL_DB_MYSQL_CLIENT=true`, `INSTALL_DB_PGSQL_CLIENT=true`, `DB_PGSQL_CLIENT_VERSION=17`
- PHP extensions (compiled/installed as needed):
  * `PHP_EXT_PDO_MYSQL=true`, `PHP_EXT_PDO_PGSQL=true`
  * `PHP_EXT_INTL=true`, `PHP_EXT_ZIP=true`, `PHP_EXT_GD=true`
  * `PHP_EXT_IMAGICK=true`, `PHP_EXT_VIPS=true`
  * `PHP_EXT_XDEBUG=true` *(present but off by default at runtime)*
- JS runtime:
  * `JS_RUNTIME_REQUIRE_NODE=true`, `JS_RUNTIME_NODE_VERSION=22`
  * you can install deno, or bun, and packages manager yarn,pnpm too via args.

At runtime you can control:

- `XDEBUG_MODE` (default off), `XDEBUG_CLIENT_HOST`
- `OVERLAY_DIRS=/opt/overlay` (colon-separated list of overlay roots)

---

## 4) s6 overlay & runtime

* `common/runtime/s6/cont-init.d/` runs on container boot.
* `common/runtime/s6/variants/<server>/services.d/` contains the main server service(s).
* `cont-init.d/20-overlay.sh` discovers overlays when `OVERLAY_DIRS` is set and symlinks `services.d/*` and `cont-*` into `/etc/…`.

**Custom overlay pattern (user land)**

```
.docker-snippets/overlays/<name>/services.d/<svc>/{run,type,log/run}
```

Mount as:

```yaml
volumes:
  - ./.docker-snippets/overlays:/opt/overlay:ro
environment:
  OVERLAY_DIRS: /opt/overlay
```

---

## 5) Docky (internal details) (its not perfact)

`v2/docky` is a Bash helper that uses **yq v4** to merge service stubs into a final `docker-compose.yml`.

* Default config: `v2/docky.yml` (devs only; **not** for end users).
* Stubs live in `v2/stubs/services/*.yml` (e.g., `app.yml`, `mysql.yml`).
* Pipeline:

  1. Collect selected stubs (`.stubs` from `docky.yml`).
  2. Merge with `yq` (app first, then the rest).
  3. Patch networks, app env/ports/volumes from config, add overlays/snippets mounts, extras.
  4. Resolve placeholders (interactive unless `--no-ask`).

**Common dev commands**

```bash
# from a fake consumer project
./.docker/v2/docky gen           # writes ./docker-compose.yml
./.docker/v2/docky list-svc
./.docker/v2/docky add-svc mysql
./.docker/v2/docky doctor
```

> For users, we still recommend either a manual minimal compose or `docky gen`. `docky.yml` should remain **internal** to php-contenv; only maintainers touch it.

---

## 6) Tests (local, no CI needed)

Everything lives in `v2/tests/`.

### What they do

* Build a **matrix** of images (8.4 × nginx/apache/frankenphp by default).
* Run each container, wait for HTTP 200, verify server process, ensure core PHP extensions exist, confirm **Xdebug is present but off**, check INI override via mounted `99-test.ini`, and assert overlay longrun service runs (creates `/tmp/hello.probe`).
* Smoke-test `docky` in a temp project.

### Run

From repo root:

```bash
make -C v2/tests               # full matrix (default TARGET=development, PORT_BASE=9300)
make -C v2/tests runtime-nginx # single target quick run
make -C v2/tests docky         # docky smoke test (no changes to your repo)
```

Env knobs:

```bash
PORT_BASE=9400 TARGET=development make -C v2/tests
```

Key files:

* `tests/scripts/test-runtime.sh` – build/run/probe one variant.
* `tests/scripts/test-matrix.sh` – iterates pairs (`Dockerfile` + server name).
* `tests/fixtures/` – overlay & php ini used in probes.
* `tests/test-docky.sh` – copies `v2` into a temp app, runs `docky gen`, `docky add-svc`.

---

## 7) Linting & sanity checks (maintainers)

Useful helpers in `v2/scripts/`:

```bash
bash v2/scripts/lint-shell.sh         # shellcheck all scripts
bash v2/scripts/lint-dockerfiles.sh   # hadolint (if you use it)
bash v2/scripts/validate-s6.sh        # quick sanity of s6 tree
bash v2/scripts/smoke.sh              # quick smoke build
```

Recommended local tools:

* `yq` v4
* `shellcheck`
* `hadolint` (optional)
* `dos2unix` (used in Dockerfiles to normalize line endings)

---

## 8) Adding/Changing things

### Add a PHP version

1. Copy an existing tree (e.g., `php/8.4` → `php/9.0`) and adjust `FROM` tags.
2. Verify `common/` compatibility; adjust if necessary.
3. Extend tests to include the new version (update matrix pairs).

### Add a server (variant)

1. Create `php/<ver>/<server>/Dockerfile`.
2. Add an s6 service under `common/runtime/s6/variants/<server>/services.d/<server>/`.
3. Update matrix to test it; add/adjust server process probe (pgrep check).

### Add an overlay

1. Create under `v2/overlays/<name>/…`.
2. Document intended mount (`/opt/overlay/<name>`).
3. Optionally provide a matching example in `examples/`.

### Add a compose service stub

1. Create `v2/stubs/services/<name>.yml`.
2. Reference it in `docky.yml` for dev testing (internal).
3. Re-run `./v2/docky gen` in a temp app to verify merge.

---

## 9) Release notes (optional workflow)

If you publish prebuilt images:

* Decide tags (e.g., `techgonia-devjio/php-contenv:8.4-nginx-v2.X.Y`).
* Build locally with desired args, push images.
* If you embed image tags in stubs, bump them; otherwise, user projects can build from Dockerfiles (recommended for dev).

---

## 10) Gotchas

* **macOS `realpath`**: BSD `realpath` differs; our scripts avoid GNU-only flags. If you change path ops, keep macOS compatibility.
* **`yq`**: v4 required. Use `yq eval` (`yq e`), not v3 syntax.
* **`docker compose`**: v2 CLI (`docker compose …`) everywhere.
* **Xdebug**: present by default (if enabled at build) but **off** at runtime; tests rely on this.

---

## 11) Maintainer checklist (before merging)

* [ ] `make -C v2/tests` passes locally for your target set.
* [ ] Nginx/Apache/FrankenPHP probes succeed (or update matrix if you intentionally limit).
* [ ] Overlays and `99-test.ini` mount verified.
* [ ] `docky` smoke test passes.
* [ ] Lint scripts (optional but nice).

---

Questions later? Drop them in issues with:

* Dockerfile path you tested,
* OS(host),docker version
* exact build args/env,
* test script output (from `v2/tests/scripts/test-runtime.sh`).

---

### FILE: .tools/.docky/readme.md ###

How does docky work?

Docky is simple bash script that should act as an assistant for non-beginner docker users. Basically, it has some useful commands
that one can run in order to make their life easier. If a user doesn't have experience with docker, user can run some simple commands
that will help the user to get started with this package. 

Docky is simple assistant whose main goal is to provide assitance with docker compose file along with other helpful.
Primary goal is to add the docker services and run the app. One can generate new docker compose file if not exists by running .docker/v2/docky gen.

So basically this package is a setup for setting a docker enviornment in any project. Suppose you have a project web app and you 
want to run and develop this project in docker wihtout installing any dependencies on your local machine. You can use this package and you just have to add 
this package as a git submodule in your project. After that you can run the command .docker/v2/docky gen to generate a docker compose file.
Where .docker is the folder name of submodule and v2 is the second version of this package. After that you can run the command .docker/v2/docky up to start the docker services.
So from the main project web app, one can execute our docky script to manage the docker services.

In our this package we provide some stubs for starting and i have planned to add more stubs in future. 
Currrently, docky would read the stubs from .docker/v2/stubs and see what we have and then it will add the service in docker composer.

Docky uses yq to manipulate the yaml files. Basically, if user is geneating the docker compose file, it will add the app.yml for the first time.
Then later user can run the command .docker/v2/docky add-svc <service-name> to add more services, in this case docky will merge the exisitng docker compose file
with the new service stub file without effecting the exisitng services in the docker compose file. This is important, it should now touch the exisitng services in docker compose file.

The stub also contains the some prefix variables like $DOCKY_REPLACE_NETWORK_NAME, and this should be parsed before merging from the stub files.
All the substituable variable start with $DOCKY_REPLACE_ and then the variable name. This is important to avoid any conflict with the other variables in the stub files.
in this case, docky will prompt in stdin to ask the user to provide the value for the variable, in this case it will ask for the network name and
then it will replace the variable with the user provided value.

we would remove the docky.yml file which i have added for the default variables but this didn't work i have expacted. 


---

### FILE: .tools/.docky/lib/stubs.sh ###

# shellcheck shell=bash

collect_stub_files(){
  # Read stub names from config and pipe through xargs to trim any whitespace.
  mapfile -t _names < <(yq -r '(.stubs // [])[]' "$DOCKY_CONFIG" | xargs -n 1)

  local want=()

  if [ -f "$COMPOSE_OUT" ]; then
    # When a compose file already exists, only process stubs that are NOT 'app'.
    local n
    for n in "${_names[@]}"; do
      if [[ "$n" != "app" ]]; then
        want+=("$n")
      fi
    done
  else
    # This is the first run (no docker-compose.yml exists).
    # Process all stubs defined in the config.
    want=("${_names[@]}")
  fi

  # If the final list is empty (e.g., only 'app' was listed for an existing compose file),
  # this function will correctly return an empty list, which is handled downstream.

  local p n app=() rest=()
  for n in "${want[@]}"; do
    p="${STUBS_DIR}/${n}.yml"
    [ -f "$p" ] || die "stub not found: $p"
    # Ensure 'app' stub is always first in the processing order if it exists.
    if [[ "$n" == "app" ]]; then app+=("$p"); else rest+=("$p"); fi
  done

  printf '%s\n' "${app[@]}" "${rest[@]}"
}

merge_stubs(){
  # If no files are passed, yq will wait on stdin. We must handle this.
  if [ "$#" -eq 0 ]; then
    echo "{}"
    return
  fi
  yq ea -o=yaml '. as $item ireduce ({}; . *+ $item)' "$@"
}


---

### FILE: .tools/.docky/lib/patches.sh ###

# shellcheck shell=bash

patch_networks() {
  # Create a temporary directory for all intermediate files
  tmp_dir="$(mktemp -d)"
  # Ensure the temporary directory is removed when the function exits
  trap 'rm -rf "$tmp_dir"' EXIT

  local net
  net="$(yq eval -r '.project.network // "dockynet"' "$DOCKY_CONFIG")"
  echo "DEBUG: Network name is: $net" >&2

  # Step 1: Ensure .services and .networks exist
  yq eval -o=yaml '.services = (.services // {}) | .networks = (.networks // {})' - > "$tmp_dir/step1.yaml"
  if [ $? -ne 0 ]; then echo "ERROR: Step 1 failed." >&2; return 1; fi

  # Step 2: Add the project network definition
  NET="$net" yq eval -o=yaml '.networks[env(NET)] = {"driver":"bridge","name": env(NET)}' "$tmp_dir/step1.yaml" > "$tmp_dir/step2.yaml"
  if [ $? -ne 0 ]; then echo "ERROR: Step 2 failed." >&2; return 1; fi

  # Step 3: Attach the network to all services
  NET="$net" yq eval -o=yaml '.services |= with_entries(.value.networks = ((.value.networks // []) + [env(NET)]))' "$tmp_dir/step2.yaml" > "$tmp_dir/step3.yaml"
  if [ $? -ne 0 ]; then echo "ERROR: Step 3 failed." >&2; return 1; fi
  echo "DEBUG: After Step 3:" >&2

  # Step 4: Remove empty entries and duplicates (in two separate yq calls)
  yq eval -o=yaml '.services |= with_entries(.value.networks |= map(select(. != "")))' "$tmp_dir/step3.yaml" > "$tmp_dir/step4.yaml"
  if [ $? -ne 0 ]; then echo "ERROR: Step 4 failed." >&2; return 1; fi

  # Apply the unique filter on the result of step 4
  yq eval -o=yaml '.services |= with_entries(.value.networks |= unique)' "$tmp_dir/step4.yaml" > "$tmp_dir/final.yaml"
  if [ $? -ne 0 ]; then echo "ERROR: Step 5 failed." >&2; return 1; fi

  echo "DEBUG: After final step:" >&2

  # Print the final output to stdout so the caller can redirect it
  cat "$tmp_dir/final.yaml"
}

patch22_networks2354() {
  # Attach the project network to every service and ensure the network is declared.
  local net; net="$(yq eval -r '.project.network // "dockynet"' "$DOCKY_CONFIG")"
  echo "DEBUG: Network name is: $net" >&2

  # The single, combined yq command
  NET="$net" yq eval -o=yaml '
    .services = (.services // {}) |
    .networks = (.networks // {}) |
    .networks[env(NET)] = {"driver":"bridge","name": env(NET)} |
    .services |= with_entries(
      .value.networks = (
        (.value.networks // []) + [env(NET)]
      ) | map(select(. != "")) | unique
    )
  ' -
}


patch_app_from_config(){
  # Safely layer project-level app config (ports/env/volumes) into services.app
  DOCKY_CFG="$DOCKY_CONFIG" yq eval -o=yaml '
    . as $dc |
    (load(strenv(DOCKY_CFG)) | .app // {}) as $app |
    $dc
    | .services = (.services // {})
    | .services.app = (.services.app // {})
    | .services.app.ports       = ((.services.app.ports       // []) + ($app.ports   // []))
    | .services.app.environment = ((.services.app.environment // {}) *  ($app.env     // {}))
    | .services.app.volumes     = ((.services.app.volumes     // []) + ($app.volumes // []))
  ' -
}

patch_overlays_mount(){
  local names; mapfile -t names < <(yq -r '(.overlays // [])[]' "$DOCKY_CONFIG")
  [ "${#names[@]}" -gt 0 ] || { cat; return 0; }

  local proj_dir_rel; proj_dir_rel="$(yq -r '.vars.DOCKER_PROJECT_OVERLAYS_DIR // ".docker/v2/overlays"' "$DOCKY_CONFIG")"
  local proj_dir_abs="${PROJECT_ROOT}/${proj_dir_rel#./}"
  local sub_dir_abs="${SUBMODULE_DIR}/overlays"

  local sub_dir_rel
  if command -v realpath >/dev/null 2>&1 && realpath --relative-to="$PROJECT_ROOT" "$sub_dir_abs" >/dev/null 2>&1; then
    sub_dir_rel="./$(realpath --relative-to="$PROJECT_ROOT" "$sub_dir_abs")"
  else
    sub_dir_rel=".$(printf '%s' "$sub_dir_abs" | sed "s#^$PROJECT_ROOT##")"
  fi

  local exprs=() odirs=()
  for n in "${names[@]}"; do
    local mount_src=""
    if [ -d "${proj_dir_abs}/$n" ]; then
      mount_src="${proj_dir_rel}/$n"
    elif [ -d "${sub_dir_abs}/$n" ]; then
      mount_src="${sub_dir_rel}/$n"
    else
      continue
    fi
    local mount_dest="/opt/overlay/${n}"
    # Safe: create services/app/volumes if missing
    exprs+=( ".services = (.services // {}) | .services.app = (.services.app // {}) | .services.app.volumes = ((.services.app.volumes // []) + [\"${mount_src}:${mount_dest}:ro\"])")
    odirs+=( "${mount_dest}" )
  done

  if ((${#exprs[@]})); then
    local combined=""
    for e in "${exprs[@]}"; do combined+="${combined:+ | }${e}"; done
    local odirs_join; IFS=: read -r odirs_join <<< "${odirs[*]}"
    yq eval -o=yaml "$combined" - \
    | ODIRS="$odirs_join" yq eval -o=yaml '
        .services = (.services // {}) |
        .services.app = (.services.app // {}) |
        .services.app.environment = ((.services.app.environment // {}) * {"OVERLAY_DIRS": strenv(ODIRS)})
      ' -
  else
    cat
  fi
}

collect_snippet_volume_lines(){
  local phpdir="${PROJECT_ROOT}/${PROJ_SNIPPETS_PHP_SUBDIR}"
  [ -d "$phpdir" ] || return 0
  local f
  for f in "$phpdir"/*.ini; do
    [ -f "$f" ] || continue
    local rel
    if command -v realpath >/dev/null 2>&1 && realpath --relative-to="$PROJECT_ROOT" "$f" >/dev/null 2>&1; then
      rel="./$(realpath --relative-to="$PROJECT_ROOT" "$f")"
    else
      rel=".$(printf '%s' "$f" | sed "s#^$PROJECT_ROOT##")"
    fi
    local dest="/usr/local/etc/php/conf.d/$(basename "$f")"
    printf "%s:%s\n" "$rel" "$dest"
  done
}

patch_snippet_volumes(){
  local lines
  mapfile -t lines < <(collect_snippet_volume_lines || true)
  [ "${#lines[@]}" -gt 0 ] || { cat; return 0; }
  local exprs=() m
  for m in "${lines[@]}"; do
    exprs+=( ".services = (.services // {}) | .services.app = (.services.app // {}) | .services.app.volumes = ((.services.app.volumes // []) + [\"$m\"])")
  done
  local combined=""; for e in "${exprs[@]}"; do combined+="${combined:+ | }${e}"; done
  yq eval -o=yaml "$combined" -
}

patch_extras(){
  DOCKY_CFG="$DOCKY_CONFIG" yq eval -o=yaml '
    . as $dc |
    (load(strenv(DOCKY_CFG)) | .extras // {}) as $ex |
    $dc
    | .services = (.services *+ ($ex.services // {}))
    | .volumes  = (.volumes  *+ ($ex.volumes  // {}))
    | .networks = (.networks *+ ($ex.networks // {}))
  ' -
}

maybe_envsubst_file(){
  local in="$1" out="$2"
  if [[ "${USE_ENVSUBST:-0}" == "1" ]]; then
    have_envsubst || die "envsubst requested but not installed"
    load_dotenv
    local tmp esc
    tmp="$(mktemp)"; esc="$(mktemp)"
    sed -E 's/DOCKY_REPLACE_([A-Z0-9_]+)/DOCKY_KEEP_\1/g' "$in" > "$esc"
    envsubst < "$esc" > "$tmp"
    sed -E 's/DOCKY_KEEP_([A-Z0-9_]+)/DOCKY_REPLACE_\1/g' "$tmp" > "$out"
    rm -f "$tmp" "$esc"
  else
    cp -f "$in" "$out"
  fi
}

# -------- preserve existing compose AND augment app (env/ports/volumes) --------
patch_preserve_existing_services(){
  [ -f "$COMPOSE_OUT" ] || { cat; return 0; }

  EXIST="$COMPOSE_OUT" NET="$(yq -r '.project.network // "dockynet"' "$DOCKY_CONFIG")" yq eval -o=yaml '
    .services = (.services // {}) |
    .networks = (.networks // {}) |
    . as $gen |
    (load(strenv(EXIST)) // {}) as $ex |

    # Merge services: keep existing entries, add new from generated
    .services = (($gen.services // {}) * ($ex.services // {})) |

    # Rebuild app from existing as base, then augment with generated env/ports/volumes
    .services.app = (($ex.services.app // {}) * {}) |
    .services.app.environment =
      ((.services.app.environment // {}) * (($gen.services.app.environment // {}))) |
    .services.app.ports =
      (((.services.app.ports // []) + (($gen.services.app.ports // [])))
       | map(select(. != "")) | unique) |
    .services.app.volumes =
      (((.services.app.volumes // []) + (($gen.services.app.volumes // [])))
       | map(select(. != "")) | unique) |

    # Attach project network to each service, dedupe, drop empties
    .services |= with_entries(
      .value.networks = (
        ((.value.networks // []) + [env(NET)])
        | map(select(. != "")) | unique
      )
    ) |

    # Ensure the project network is declared
    .networks = ((.networks // {}) * { (env(NET)): {"driver":"bridge","name": env(NET)} })
  ' -
}

---

### FILE: .tools/.docky/lib/utils.sh ###

# shellcheck shell=bash

need(){ command -v "$1" >/dev/null 2>&1 || die "missing dependency: $1"; }

yq_raw(){ yq -r "$1" "$2"; }

have_envsubst(){ command -v envsubst >/dev/null 2>&1; }

is_tty(){ [[ -t 0 ]] && [[ -t 1 ]]; }

load_dotenv(){
  local envf="${PROJECT_ROOT}/.env"
  [ -f "$envf" ] || return 0
  set -a
  # shellcheck disable=SC1090
  . "$envf"
  set +a
}
---

### FILE: .tools/.docky/lib/common.sh ###

# shellcheck shell=bash
set -euo pipefail

# ---- anchor paths (works from any entrypoint) ----
DOCKY_HOME="${DOCKY_HOME:-$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)}"     # -> .../.docker/v2/.tools/.docky
SUBMODULE_DIR="${SUBMODULE_DIR:-$(cd "$DOCKY_HOME/../.." && pwd)}"              # -> .../.docker/v2
PROJECT_ROOT="${PROJECT_ROOT:-$(pwd)}"



STUBS_DIR="${STUBS_DIR:-${SUBMODULE_DIR}/stubs/services}"
COMPOSE_OUT="${COMPOSE_OUT:-${PROJECT_ROOT}/docker-compose.yml}"
PROJ_SNIPPETS_DIR=".docker-snippets"
PROJ_SNIPPETS_PHP_SUBDIR="${PROJ_SNIPPETS_PHP_SUBDIR:-${PROJ_SNIPPETS_DIR}/php}"
ANSWERS_FILE="${ANSWERS_FILE:-${PROJECT_ROOT}/${PROJ_SNIPPETS_DIR}/.docky.answers.yml}"
PROJECT_DOCKY_YML_FILE="${PROJECT_ROOT}/${PROJ_SNIPPETS_DIR}/docky.yml"
# Prefer project-level config; fallback to submodule default
if [ -f "${PROJECT_DOCKY_YML_FILE}" ]; then
  DOCKY_CONFIG="${PROJECT_DOCKY_YML_FILE}"
else
  DOCKY_CONFIG="${SUBMODULE_DIR}/docky.yml"
fi

# libs
# shellcheck disable=SC1091
source "$DOCKY_HOME/lib/version.sh"
source "$DOCKY_HOME/lib/log.sh"
source "$DOCKY_HOME/lib/utils.sh"
source "$DOCKY_HOME/lib/answers.sh"
source "$DOCKY_HOME/lib/stubs.sh"
source "$DOCKY_HOME/lib/patches.sh"
source "$DOCKY_HOME/lib/placeholders.sh"

---

### FILE: .tools/.docky/lib/answers.sh ###

# shellcheck shell=bash


ans_get(){
  local key="$1"
  [ -f "$ANSWERS_FILE" ] || { echo ""; return 0; }
  yq -r ".[\"$key\"] // \"\"" "$ANSWERS_FILE"
}


ans_set(){
  local key="$1" val="$2"
  if [ ! -f "$ANSWERS_FILE" ]; then
    printf "{}\n" > "$ANSWERS_FILE"
  fi
  yq -i ".[\"$key\"] = \"$val\"" "$ANSWERS_FILE"
}


ans_show(){
  if [ -f "$ANSWERS_FILE" ]; then
    echo "# ${ANSWERS_FILE#${PROJECT_ROOT}/}"
    cat "$ANSWERS_FILE"
  else
    echo "(no answers saved yet)"
  fi
}


ans_reset(){
  rm -f "$ANSWERS_FILE"
  ok "cleared ${ANSWERS_FILE#${PROJECT_ROOT}/}"
}
---

### FILE: .tools/.docky/lib/placeholders.sh ###

# shellcheck shell=bash

collect_placeholders(){
  local file="$1"
  grep -oE '\$\{?DOCKY_REPLACE_[A-Z0-9_]+\}?' "$file" | sed 's/[${}]//g' | sort -u || true
}

option_list_for(){
  local base="$1"
  yq -r "((.OPTIONS.$base // .OPTIONS.${base}s // .OPTIONS.${base}S // [])[])" "$DOCKY_CONFIG"
}

default_for(){
  yq -r ".vars.$1 // []" "$DOCKY_CONFIG"
}

prompt_choice(){
  local key="$1" base="${1#DOCKY_REPLACE_}" def="$2"
  shift 2
  local opts=("$@")
  echo
  echo "⚙  $base"
  if ((${#opts[@]})); then
    echo "   available:"
    local i=1
    for o in "${opts[@]}"; do printf "    %d) %s\n" "$i" "$o"; ((i++)); done
    echo -n "   pick [1-${#opts[@]}] or type a value"
    [ -n "$def" ] && echo -n " (default: $def)"
    echo -n ": "
    read -r ans || true
    if [[ -z "$ans" && -n "$def" ]]; then
      echo "$def"
    elif [[ "$ans" =~ ^[0-9]+$ ]] && (( ans>=1 && ans<=${#opts[@]} )); then
      echo "${opts[ans-1]}"
    else
      echo "$ans"
    fi
  else
    echo -n "   value"
    [ -n "$def" ] && echo -n " (default: $def)"
    echo -n ": "
    read -r ans || true
    echo "${ans:-$def}"
  fi
}

resolve_placeholders(){
  local in="$1" out="$2" ask="${3:-1}"
  local tmp_in; tmp_in="$(mktemp)"; cp "$in" "$tmp_in"

  local keys; mapfile -t keys < <(collect_placeholders "$tmp_in" || true)
  [ "${#keys[@]}" -gt 0 ] || { cp -f "$tmp_in" "$out"; rm "$tmp_in"; return 0; }

  local k base def val opts
  for k in "${keys[@]}"; do
    base="${k#DOCKY_REPLACE_}"
    val="$(ans_get "$k")"
    [ -z "$val" ] && val="${!base:-}"
    mapfile -t opts < <(option_list_for "$base" || true)
    if [ -z "$val" ]; then
      def="$(default_for "$base")"
      if [[ "$ask" == "1" ]] && is_tty; then
        val="$(prompt_choice "$k" "$def" "${opts[@]}")"
      else
        val="${def:-${opts[0]:-}}"
      fi
    fi
    ans_set "$k" "$val"
    export "$k"="$val"
  done

  local norm; norm="$(mktemp)"
  sed -E 's/\$([A-Z0-9_]+)/${\1}/g' "$tmp_in" > "$norm"

  local vlist; vlist="$(printf ' ${%s}' "${keys[@]}")"
  envsubst "$vlist" < "$norm" > "$out"

  rm -f "$tmp_in" "$norm"
}

resolve_placeholders23(){
  local in="$1" out="$2" ask="${3:-1}"
  local tmp_in; tmp_in="$(mktemp)"; cp "$in" "$tmp_in"

  # 1) collect keys
  local keys; mapfile -t keys < <(collect_placeholders "$tmp_in" || true)
  [ "${#keys[@]}" -gt 0 ] || { cp -f "$tmp_in" "$out"; rm "$tmp_in"; return 0; }

  # 2) pick values (same as your current logic)
  local k base def val opts
  for k in "${keys[@]}"; do
    base="${k#DOCKY_REPLACE_}"
    val="$(ans_get "$k")"
    [ -z "$val" ] && val="${!base:-}"
    mapfile -t opts < <(option_list_for "$base" || true)
    if [ -z "$val" ]; then
      def="$(default_for "$base")"
      if [[ "$ask" == "1" ]] && is_tty; then
        val="$(prompt_choice "$k" "$def" "${opts[@]}")"
      else
        val="${def:-${opts[0]:-}}"
      fi
    fi
    ans_set "$k" "$val"
    export "$k"="$val"
  done

  # 3) normalize $VAR -> ${VAR} so envsubst catches both forms
  local norm; norm="$(mktemp)"
  sed -E 's/\$([A-Z0-9_]+)/${\1}/g' "$tmp_in" > "$norm"

  # 4) build a whitelist for envsubst and substitute
  local vlist; vlist="$(printf ' ${%s}' "${keys[@]}")"
  envsubst "$vlist" < "$norm" > "$out"

  rm -f "$tmp_in" "$norm"
}

---

### FILE: .tools/.docky/lib/log.sh ###

# shellcheck shell=bash


die(){ echo "✗ $*" >&2; exit 1; }
warn(){ echo "⚠ $*" >&2; }
info(){ echo "› $*"; }
ok(){ echo "✓ $*"; }
---

### FILE: .tools/.docky/lib/version.sh ###

# shellcheck disable=SC2034
DOCKY_VERSION="v2.0.0"
---

### FILE: .tools/.docky/commands/add_service.sh ###

# shellcheck shell=bash

name="${1:-}"; [ -n "$name" ] || die "usage: docky add-svc <name>"
[ -f "${STUBS_DIR}/${name}.yml" ] || die "stub not found: ${STUBS_DIR}/${name}.yml"

proj_config="${PROJECT_DOCKY_YML_FILE:-$PROJECT_ROOT/${PROJ_SNIPPETS_DIR:-.docker-snippets}/docky.yml}"

# Bootstrap a project-level config as APP-ONLY baseline (opt-in for extra services)
if [ ! -f "$proj_config" ]; then
  info "creating project-level docky.yml from submodule default (app-only)"
  cp -f "${SUBMODULE_DIR}/docky.yml" "$proj_config"
  # force app-only list and drop any submodule defaults that add services implicitly
  yq -i '.stubs = ["app"]' "$proj_config"
  DOCKY_CONFIG="$proj_config"
fi

# Ensure .stubs exists
if ! yq -e '.stubs' "$proj_config" >/dev/null 2>&1; then
  yq -i '.stubs = ["app"]' "$proj_config"
fi

# Append requested service if not present
if yq -e ".stubs | contains([\"$name\"])" "$proj_config" >/dev/null; then
  info "service '$name' is already in the stubs list of ${proj_config#$PROJECT_ROOT/}"
else
  yq -i ".stubs += [\"$name\"]" "$proj_config"
  ok "added '$name' to stubs list in ${proj_config#$PROJECT_ROOT/}"
fi

# Regenerate compose
info "regenerating docker-compose.yml..."
source "${DOCKY_HOME:-$ROOT_DIR}/commands/generate.sh" --no-ask

---

### FILE: .tools/.docky/commands/doctor.sh ###

# shellcheck shell=bash

need docker
if ! docker compose version >/dev/null 2>&1; then die "Docker Compose v2 not found (need 'docker compose')."; fi
ok "docker: $(docker --version | cut -d' ' -f3- | sed 's/,//')"
ok "compose: $(docker compose version | head -n1)"
need yq
yq --version | grep -q 'version v4\.' || warn "yq v4 strongly recommended; found: $(yq --version)"
if have_envsubst; then ok "envsubst present"; else warn "envsubst not found; --envsubst will be unavailable"; fi
[ -f "$DOCKY_CONFIG" ] || die "config not found: $DOCKY_CONFIG"
ok "using config: ${DOCKY_CONFIG#$PROJECT_ROOT/}"
[ -d "$STUBS_DIR" ] || die "stubs dir missing: $STUBS_DIR"
ok "doctor looks good."
---

### FILE: .tools/.docky/commands/generate.sh ###

# shellcheck shell=bash

USE_ENVSUBST=0; ASK=1

for m in "$@"; do
  case "$m" in
    --envsubst) USE_ENVSUBST=1 ;;
    --no-ask)   ASK=0 ;;
  esac
done

# doctor (non-fatal)
if [ -f "$DOCKY_HOME/commands/doctor.sh" ]; then
  { source "$DOCKY_HOME/commands/doctor.sh"; } >/dev/null || true
elif [ -f "$SUBMODULE_DIR/.tools/.docky/commands/doctor.sh" ]; then
  { source "$SUBMODULE_DIR/.tools/.docky/commands/doctor.sh"; } >/dev/null || true
fi

mapfile -t files < <(collect_stub_files)
if [ -f "$COMPOSE_OUT" ]; then
  info "merge (non-app overlays only): $(printf '%s ' "${files[@]//$PROJECT_ROOT\//}")"
else
  info "fresh mode (app-only unless project overrides): $(printf '%s ' "${files[@]//$PROJECT_ROOT\//}")"
fi

tmp_merged="$(mktemp)"
if [ "${#files[@]}" -eq 0 ]; then
  printf '{}' > "$tmp_merged"
else
  merge_stubs "${files[@]}" > "$tmp_merged"
fi

t1="$(mktemp)"; t2="$(mktemp)"; t3="$(mktemp)"; t4="$(mktemp)"; t5="$(mktemp)"; t6="$(mktemp)"; t7="$(mktemp)"

patch_networks < "$tmp_merged" > "$t1"
echo "Network patched"
patch_app_from_config < "$t1"        > "$t2"
echo "App from config patched"
patch_overlays_mount  < "$t2"        > "$t3"
echo "Overlays mount patched"
patch_snippet_volumes < "$t3"        > "$t4"
echo "Snippet volumes patched"
patch_extras          < "$t4"        > "$t5"
echo "Extras patched"
patch_preserve_existing_services < "$t5" > "$t6"
echo "Existing services preserved"

resolve_placeholders "$t6" "$t7" "$ASK"
maybe_envsubst_file   "$t7" "$COMPOSE_OUT"

rm -f "$tmp_merged" "$t1" "$t2" "$t3" "$t4" "$t5" "$t6" "$t7"
ok "wrote ${COMPOSE_OUT#${PROJECT_ROOT}/}"
info "services:"; yq -r '.services | keys | .[]' "$COMPOSE_OUT" | sed 's/^/ - /'

---

### FILE: .tools/.docky/commands/dc.sh ###

# shellcheck shell=bash

dc(){ docker compose "$@"; }
cmd="$1"; shift || true
dc "$cmd" "$@"
---

### FILE: .tools/.docky/commands/config.sh ###

# shellcheck shell=bash

subcmd="${1:-show}"; shift || true
case "$subcmd" in
  show)  ans_show ;;
  reset) ans_reset ;;
  set)
    k="${1:-}"; v="${2:-}"
    [ -n "$k" ] && [ -n "$v" ] || die "usage: docky config set DOCKY_REPLACE_KEY value"
    ans_set "$k" "$v"; ok "set $k=$v" ;;
  *) die "usage: docky config {show|reset|set DOCKY_REPLACE_KEY value}" ;;
esac
---

### FILE: .tools/.docky/commands/list_services.sh ###

# shellcheck shell=bash

echo "—— Available Stubs (from submodule) ——"
( cd "$STUBS_DIR" && ls -1 *.yml 2>/dev/null | sed 's/\.yml$//' | sed 's/^/ - /' ) || echo " (none)"
echo
echo "—— Enabled Stubs (from ${DOCKY_CONFIG#$PROJECT_ROOT/}) ——"
yq -r '(.stubs // [])[]' "$DOCKY_CONFIG" 2>/dev/null | sed 's/^/ - /' || echo " (none)"
echo
echo "—— Final Services (in ${COMPOSE_OUT#$PROJECT_ROOT/}) ——"
if [ -f "$COMPOSE_OUT" ]; then
  yq -r '.services | keys | .[]' "$COMPOSE_OUT" | sed 's/^/ - /'
else
  echo " (compose not generated yet; run: bin/docky gen)"
fi
---

### FILE: .tools/.docky/commands/open_docs.sh ###

# shellcheck shell=bash

if ! command -v mkdocs >/dev/null 2>&1; then
  die "mkdocs not found. Install: pip install mkdocs mkdocs-material"
fi

docs_dir="${SUBMODULE_DIR}/docs"
[ -f "$docs_dir/mkdocs.yml" ] || die "mkdocs.yml not found in ${docs_dir}"
info "Serving docs from $docs_dir on http://127.0.0.1:5105"
( cd "$docs_dir" && mkdocs serve -a 127.0.0.1:5105 )
---

### FILE: .tools/.docky/commands/snippet.sh ###

# shellcheck shell=bash

sub="${1:-}"; shift || true

snippet_php_ini(){
  local name="${1:-custom}"
  name="${name%.ini}"
  local dir="${PROJECT_ROOT}/${PROJ_SNIPPETS_PHP_SUBDIR}"
  mkdir -p "$dir"
  local f="${dir}/${name}.ini"
  if [ -f "$f" ]; then
    warn "exists: ${f#${PROJECT_ROOT}/}"
  else
    cat > "$f" <<EOF
; ${name}.ini — project snippet (auto-mounted by docky)
; examples:
; memory_limit = 1024M
; upload_max_filesize = 128M
EOF
    ok "created ${f#"${PROJECT_ROOT}"/}"
  fi
  { source "$DOCKY_HOME/commands/generate.sh" --no-ask; } >/dev/null || true
  info "mounted at: /usr/local/etc/php/conf.d/${name}.ini"
}

snippet_list(){
  local phpdir="${PROJECT_ROOT}/${PROJ_SNIPPETS_PHP_SUBDIR}"
  echo "snippets root: ${phpdir}"
  if [ -d "$phpdir" ]; then
    echo "php ini:"
    find "$phpdir" -maxdepth 1 -type f -name '*.ini' -printf " - %P\n" 2>/dev/null || true
  else
    echo "php ini: (none)"
  fi
}

case "$sub" in
  php-ini) snippet_php_ini "${1:-custom}" ;;
  ls|list) snippet_list ;;
  *) die "usage: docky snippet {php-ini <name>|list}" ;;
esac
---

### FILE: .tools/.docky/docky.sh ###

#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"   # -> .../.tools/.docky
export DOCKY_HOME="$SCRIPT_DIR"

# shellcheck disable=SC1091
source "$DOCKY_HOME/lib/common.sh"

cmd="${1:-help}"; shift || true
case "$cmd" in
  version|-v|--version) echo "docky $DOCKY_VERSION" ;;
  doctor)          source "$DOCKY_HOME/commands/doctor.sh" ;;
  gen|generate)    source "$DOCKY_HOME/commands/generate.sh" "$@" ;;
  add-svc|add-service) source "$DOCKY_HOME/commands/add_service.sh" "${1:-}" ;;
  list-svc|list-services) source "$DOCKY_HOME/commands/list_services.sh" ;;
  snippet)         sub="${1:-}"; shift || true; source "$DOCKY_HOME/commands/snippet.sh" "$sub" "$@" ;;
  config)          sub="${1:-show}"; shift || true; source "$DOCKY_HOME/commands/config.sh" "$sub" "$@" ;;
  open-docs)       source "$DOCKY_HOME/commands/open_docs.sh" ;;
  up|down|ps|logs|exec|run|restart|build|pull) source "$DOCKY_HOME/commands/dc.sh" "$cmd" "$@" ;;
  help|-h|--help|*)

    cat <<'EOF'
docky — v2.6
USAGE
  .docker/v2/docky <command>

COMMANDS
  doctor                          Check dependencies (docker, yq, etc).
  gen [--no-ask] [--envsubst]     Generate docker-compose.yml from stubs.
  add-svc <name>                  Add a service stub to your project's docky.yml.
  list-svc                        List available and enabled service stubs.
  snippet php-ini <name>          Create a custom PHP .ini file snippet.
  snippet list                    List active project snippets.
  config show|set|reset           Manage saved answers in .docky.answers.yml.
  open-docs                       Serve documentation locally (mkdocs).
  up|down|ps|logs|...             Pass-through to 'docker compose'.

NOTES
- Config: Uses 'docky.yml' in your project root if it exists, otherwise
  falls back to the default one in the submodule.
- Answers: Choices from 'gen' saved in '.docky.answers.yml' in project root.
- Overlays: Project-level overlays in '.docker/overlays/' override same-named
  overlays from the submodule.
EOF
    ;;
 esac
