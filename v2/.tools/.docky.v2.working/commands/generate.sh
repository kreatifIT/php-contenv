#!/usr/bin/env bash


force=0
services_to_generate=()
for arg in "$@"; do
  [[ "$arg" == "--force" ]] && force=1 || services_to_generate+=("$arg")
done

[ ${#services_to_generate[@]} -eq 0 ] && services_to_generate=("app")

if [[ " ${services_to_generate[*]} " =~ " app " ]] && [[ "${services_to_generate[0]}" != "app" ]]; then
  services_without_app=()
  for svc in "${services_to_generate[@]}"; do [ "$svc" != "app" ] && services_without_app+=("$svc"); done
  services_to_generate=("app" "${services_without_app[@]}")
fi

if [ -f "${COMPOSE_OUT_FILE}" ] && [ $force -eq 0 ]; then
  info "${COMPOSE_OUT_FILE#${PROJECT_ROOT}/} already exists. Use 'docky gen ${services_to_generate[*]} --force' to overwrite."
  exit 0
fi

[ -f "${COMPOSE_OUT_FILE}" ] && [ $force -eq 1 ] && {
  ts="$(date +%Y%m%d-%H%M%S)"; bak_file="${COMPOSE_OUT_FILE}.${ts}.bak"
  cp "${COMPOSE_OUT_FILE}" "$bak_file"
  info "Backed up existing compose file to ${bak_file#${PROJECT_ROOT}/}"
}

info "Assembling new docker-compose.yml..."
services_yaml=""
volumes_yaml=""
network_name=""

for svc in "${services_to_generate[@]}"; do
  info "--- Assembling service: ${svc} ---"
  svc_yaml_part="" vol_yaml_part=""
  if ! { IFS= read -r -d $'\0' svc_yaml_part && { IFS= read -r -d '' vol_yaml_part || true; }; } < <(build_stub_docs "$svc"); then
      warn "Failed to read definition for service '${svc}'. Skipping."
      continue
  fi

  if [ -n "${svc_yaml_part}" ]; then
    services_yaml="${services_yaml}${services_yaml:+$'\n'}${svc_yaml_part}"
  fi
  if [ -n "${vol_yaml_part}" ]; then
    volumes_yaml="${volumes_yaml}${volumes_yaml:+$'\n'}${vol_yaml_part}"
  fi
done

network_name=$(_cache_get "DOCKY_REPLACEABLE_NETWORK_NAME")
[ -z "${services_yaml}" ] && die "No services could be assembled. Aborting generation."

tmp="$(mktemp)"
{
  echo "# This file was generated by docky."
  echo "version: '3.8'"
  echo ""
  echo "services:"
  printf '%s\n' "${services_yaml}"
  if [ -n "${volumes_yaml}" ]; then
    echo ""
    echo "volumes:"
    printf '%s\n' "${volumes_yaml}"
  fi
  echo ""
  echo "networks:"
  echo "  ${network_name}:"
  echo "    driver: bridge"
  echo "    name: ${network_name}"
} > "$tmp"

mv "$tmp" "${COMPOSE_OUT_FILE}"
good "Wrote ${COMPOSE_OUT_FILE#${PROJECT_ROOT}/}"

