#!/usr/bin/env php

<?php
/**
 * Swoole mini server with safe static handling and dev hot-reload.
 * Env:
 *   SWOOLE_HOST (default 0.0.0.0)
 *   SWOOLE_PORT (default 80)
 *   SWOOLE_DOCUMENT_ROOT (default /var/www/html/public)
 *   SWOOLE_WORKER_NUM ("auto" or int)
 *   SWOOLE_WATCH (1 => opcache_reset() on each request)
 */

declare(strict_types=1);

$host    = getenv('SWOOLE_HOST') ?: '0.0.0.0';
$port    = (int) (getenv('SWOOLE_PORT') ?: 80);
$docroot = rtrim(getenv('SWOOLE_DOCUMENT_ROOT') ?: '/var/www/html/public', '/');
$workers = getenv('SWOOLE_WORKER_NUM') === 'auto' ? swoole_cpu_num() : (int) getenv('SWOOLE_WORKER_NUM');
$watch   = (getenv('SWOOLE_WATCH') ?: '0') === '1';

if (!extension_loaded('openswoole') && !extension_loaded('swoole')) {
    // STDERR, not STDOUT
    fwrite(STDERR, "[swoole] extension missing\n");
    exit(1);
}

$server = new Swoole\Http\Server($host, $port);
$server->set([
    'worker_num'            => max(1, $workers ?: (int) shell_exec('nproc 2>/dev/null') ?: 1),
    'max_request'           => (int) (getenv('SWOOLE_MAX_REQUESTS') ?: 10000),
    // IMPORTANT: disabled so we never serve PHP as text
    'enable_static_handler' => false,
    'http_parse_post'       => true,
    'http_compression'      => (bool) (int) (getenv('SWOOLE_HTTP_COMPRESSION') ?: 1),
    'buffer_output_size'    => 4 * 1024 * 1024,
    'package_max_length'    => 32 * 1024 * 1024,
    'reload_async'          => true,
]);

function is_static_path(string $path): bool {
    return (bool) preg_match('~\.(?:css|js|png|jpe?g|gif|ico|svg|webp|avif|woff2?|ttf|eot|map)$~i', $path);
}
function content_type_for(string $path): string {
    static $map = [
        'css'=>'text/css','js'=>'application/javascript','png'=>'image/png','jpg'=>'image/jpeg','jpeg'=>'image/jpeg',
        'gif'=>'image/gif','svg'=>'image/svg+xml','ico'=>'image/x-icon','webp'=>'image/webp','avif'=>'image/avif',
        'woff'=>'font/woff','woff2'=>'font/woff2','ttf'=>'font/ttf','eot'=>'application/vnd.ms-fontobject','map'=>'application/json'
    ];
    $ext = strtolower(pathinfo($path, PATHINFO_EXTENSION));
    return $map[$ext] ?? (mime_content_type($path) ?: 'application/octet-stream');
}

$server->on('request', function (Swoole\Http\Request $req, Swoole\Http\Response $res) use ($docroot, $watch) {
    if ($watch && function_exists('opcache_reset')) {
        // Dev: nuke entire cache every request so changes always show
        @opcache_reset();
    }

    $uri  = urldecode($req->server['request_uri'] ?? '/');
    $path = realpath($docroot . ($uri === '/' ? '/index.html' : $uri));

    // Serve allowed static assets
    if ($path && str_starts_with($path, $docroot) && is_file($path) && is_static_path($path)) {
        $res->header('Content-Type', content_type_for($path));
        if (strtoupper($req->server['request_method'] ?? 'GET') === 'HEAD') {
            $res->end('');
            return;
        }
        $res->sendfile($path);
        return;
    }

    // Dynamic through public/index.php
    $index = $docroot . '/index.php';
    if (!is_file($index)) {
        $res->status(404);
        $res->header('Content-Type', 'text/plain; charset=UTF-8');
        $res->end("index.php not found\n");
        return;
    }

    // Bridge input
    $_GET     = $req->get ?? [];
    $_POST    = $req->post ?? [];
    $_COOKIE  = $req->cookie ?? [];
    $_FILES   = $req->files ?? [];
    $_SERVER  = array_merge($_SERVER, [
        'REQUEST_METHOD'  => $req->server['request_method'] ?? 'GET',
        'REQUEST_URI'     => $req->server['request_uri'] ?? '/',
        'QUERY_STRING'    => $req->server['query_string'] ?? '',
        'REMOTE_ADDR'     => $req->server['remote_addr'] ?? '',
        'SERVER_PROTOCOL' => $req->server['server_protocol'] ?? 'HTTP/1.1',
        'HTTP_HOST'       => $req->header['host'] ?? '',
        'HTTPS'           => (!empty($req->header['x-forwarded-proto']) && $req->header['x-forwarded-proto']==='https') ? 'on' : '',
        'SERVER_SOFTWARE' => 'swoole',
        'DOCUMENT_ROOT'   => $docroot,
        'SCRIPT_FILENAME' => $index,
        'SCRIPT_NAME'     => '/index.php',
        'PHP_SELF'        => '/index.php',
    ]);
    foreach (($req->header ?? []) as $k => $v) {
        $_SERVER['HTTP_' . strtoupper(str_replace('-', '_', $k))] = $v;
    }

    // Run entry script isolated in an output buffer
    ob_start();
    try {
        require $index;
        $content = ob_get_clean();

        // Copy PHP headers set by the app to Swoole
        $phpHeaders = headers_list();
        $sentContentType = false;
        foreach ($phpHeaders as $h) {
            [$name, $val] = array_map('trim', explode(':', $h, 2));
            if ($name !== '') {
                if (strcasecmp($name, 'Content-Type') === 0) $sentContentType = true;
                $res->header($name, $val);
            }
        }
        if (!$sentContentType) {
            // default only if app didnâ€™t set one
            $res->header('Content-Type', 'text/html; charset=UTF-8');
        }

        if (strtoupper($req->server['request_method'] ?? 'GET') === 'HEAD') {
            $res->end('');
            return;
        }
        $res->end($content);
    } catch (Throwable $e) {
        ob_end_clean();
        $res->status(500);
        $res->header('Content-Type', 'text/plain; charset=UTF-8');
        $res->end("Unhandled exception:\n".$e);
    }
});

// Do NOT echo anything here.
// If you really want a note, use error_log('Swoole listening on ...');
$server->start();